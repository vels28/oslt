Week2
[s2022103042@centos8-linux Wed May 15 05:58 PM os]$ cd wk1                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:58 PM wk1]$ ls                                                                                                    
a1  commands  h1.txt  h2.txt  h3.txt
[s2022103042@centos8-linux Wed May 15 05:58 PM wk1]$ cd ..                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:58 PM os]$ cd wk2                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:58 PM wk2]$ ls                                                                                                    
q1.sh  q2.sh  q3.sh  q4.sh  q5.sh  q6.sh  q7.sh  s2.sh  s3.sh  s4.sh  s5.sh  s6.sh  s7.sh
[s2022103042@centos8-linux Wed May 15 05:58 PM wk2]$ cat q1.ah                                                                                             
cat: q1.ah: No such file or directory                                                                                                                      
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q1.sh                                                                                             
#!/bin/bash                                                                                                                                                
read -p "enter a value of n:" n                                                                                                                            
power=$((2**n))                                                                                                                                            
for((i=1;i<=power;i*=2))                                                                                                                                   
do                                                                                                                                                         
        echo $i;                                                                                                                                           
done                                                                                                                                                       
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q2.sh                                                                                             
#!/bin/bash                                                                                                                                                
read -p"enter num1:" num1                                                                                                                                  
read -p"enter num2:" num2                                                                                                                                  
sum=$((num1+num2))                                                                                                                                         
echo "sum is $sum"                                                                                                                                         
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q3.sh                                                                                             
#!/bin/bash                                                                                                                                                
if [ $# -ne 3 ]; then                                                                                                                                      
        echo "usage:$0 <num1><operator><num2>"                                                                                                             
        exit 1                                                                                                                                             
fi                                                                                                                                                         
num1=$1                                                                                                                                                    
operator=$2                                                                                                                                                
num2=$3                                                                                                                                                    
if ! [[ $num1 =~ ^[0-9]+$ ]] || ! [[ $num2 =~ ^[0-9]+$ ]]; then                                                                                            
        echo "error: provide numeric value for num1 and num2"                                                                                              
        exit 1                                                                                                                                             
fi                                                                                                                                                         
case $operator in                                                                                                                                          
        +)                                                                                                                                                 
                result=$((num1+num2));;                                                                                                                    
        -)                                                                                                                                                 
                result=$((num1-num2));;                                                                                                                    
        \*)                                                                                                                                                
                result=$((num1*num2));;                                                                                                                    
        /)                                                                                                                                                 
                if [ $num2 -eq 0 ];then                                                                                                                    
                        echo "error: division by zero is not possible"                                                                                     
                        exit 1                                                                                                                             
                fi                                                                                                                                         
                result=$((num1/num2));;                                                                                                                    
        *)                                                                                                                                                 
                echo "invalid operation"                                                                                                                   
                exit1;;                                                                                                                                    
esac                                                                                                                                                       
echo "result:$result"                                                                                                                                      
                                                                                                                                                           
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q4.sh                                                                                             
#!/bin/bash                                                                                                                                                
if [ $# -lt 2 ]; then                                                                                                                                      
        echo "usage: $0 <num1><num2>[<num3>...]"                                                                                                           
        exit 1                                                                                                                                             
fi                                                                                                                                                         
max=$1                                                                                                                                                     
for x in "$@"; do                                                                                                                                          
        if [[ $x =~ ^[0-9]+$ ]]; then                                                                                                                      
                if [ $x -gt $max ]; then                                                                                                                   
                        max=$x                                                                                                                             
                fi                                                                                                                                         
        else                                                                                                                                               
                echo "error: $x is not numeric"                                                                                                            
        fi                                                                                                                                                 
done                                                                                                                                                       
echo "the largest value is $max"                                                                                                                           
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q5.sh                                                                                             
#!/bin/bash                                                                                                                                                
echo "enter a number"                                                                                                                                      
read n                                                                                                                                                     
reverse=""                                                                                                                                                 
for (( i=${#n}-1; i>=0; i-- )); do                                                                                                                         
        reverse="$reverse${n:$i:1}"                                                                                                                        
done                                                                                                                                                       
echo "original number:" $n                                                                                                                                 
echo "reversed number:" $reverse                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q6.sh                                                                                             
#!/bin/bash                                                                                                                                                
read -p"enter the n:" n                                                                                                                                    
a=0                                                                                                                                                        
b=1                                                                                                                                                        
while [ $a -le $n ]                                                                                                                                        
do                                                                                                                                                         
        echo $a                                                                                                                                            
        temp=$((a+b))                                                                                                                                      
        a=$b                                                                                                                                               
        b=$temp                                                                                                                                            
done                                                                                                                                                       
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q7.sh                                                                                             
#!/bin/bash                                                                                                                                                
echo "enter string done for completed"                                                                                                                     
declare -a strings                                                                                                                                         
while true; do                                                                                                                                             
        read str                                                                                                                                           
        if [ "$str" == "done" ]; then                                                                                                                      
                break                                                                                                                                      
        fi                                                                                                                                                 
        strings+=("$str")                                                                                                                                  
done                                                                                                                                                       
for string in "${strings[@]}"; do                                                                                                                          
        len=${#string}                                                                                                                                     
        echo "string: $string, length: $len"                                                                                                               
done                                                                                                                                                       
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat q8.sh                                                                                             
cat: q8.sh: No such file or directory                                                                                                                      
[s2022103042@centos8-linux Wed May 15 06:00 PM wk2]$ cat s2.sh                                                                                             
#!/bin/bash                                                                                                                                                
for((i=0;i<8;i++))                                                                                                                                         
do                                                                                                                                                         
        for((j=0;j<8;j++))                                                                                                                                 
        do                                                                                                                                                 
                if (( (i+j) % 2==0))                                                                                                                       
                then                                                                                                                                       
                        echo -ne "\033[47m  \033[0m"                                                                                                       
                else                                                                                                                                       
                        echo -ne "\033[40m  \033[0m"                                                                                                       
                fi                                                                                                                                         
        done                                                                                                                                               
        echo                                                                                                                                               
done                                                                                                                                                       
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:01 PM wk2]$ cat s3.sh                                                                                             
#!/bin/bash                                                                                                                                                
hour=$(date +%H)                                                                                                                                           
if (( hour >=1 && hour < 12));                                                                                                                             
then                                                                                                                                                       
        echo "good morning"                                                                                                                                
elif ((hour >12 && hour <18));                                                                                                                             
then                                                                                                                                                       
        echo "good afternoon"                                                                                                                              
elif ((hour >=18 && hour <20));                                                                                                                            
then                                                                                                                                                       
        echo "good evening"                                                                                                                                
else                                                                                                                                                       
        echo "good night"                                                                                                                                  
fi                                                                                                                                                         
[s2022103042@centos8-linux Wed May 15 06:01 PM wk2]$ cat s4.sh                                                                                             
#!/bin/bash                                                                                                                                                
read -p"enter a string" str                                                                                                                                
echo $str | tr ’[:upper:]’ ’[:lower:]’                                                                                                                     
echo $str | tr ’[:lower:]’ ’[:upper:]’                                                                                                                     
[s2022103042@centos8-linux Wed May 15 06:01 PM wk2]$ cat s5.sh                                                                                             
#!/bin/bash                                                                                                                                                
read -p"enter n" n                                                                                                                                         
for((i=0;i<n;i++))                                                                                                                                         
do                                                                                                                                                         
        for((j=0;j<i;j++))                                                                                                                                 
        do                                                                                                                                                 
                echo -ne "* "                                                                                                                              
        done                                                                                                                                               
        echo                                                                                                                                               
done                                                                                                                                                       
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:01 PM wk2]$ cat s6.sh                                                                                             
#!/bin/bash                                                                                                                                                
chars='A-Za-z0-9!@#$%^&*(){}[]/\.;'                                                                                                                        
pass=$(head /dev/urandom | tr -dc "$chars" |head -c 8)                                                                                                     
echo "$pass"                                                                                                                                               
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:01 PM wk2]$ cat s7.sh                                                                                             
#!/bin/bash                                                                                                                                                
read -p"enter month:" mon                                                                                                                                  
read -p"enter year:" year                                                                                                                                  
cal $mon $year                                                                                                                                             



















































Week 3
[s2022103042@centos8-linux Wed May 15 06:01 PM wk2]$ cd ..                                                                                                 
[s2022103042@centos8-linux Wed May 15 06:01 PM os]$ cd wk3                                                                                                 
[s2022103042@centos8-linux Wed May 15 06:01 PM wk3]$ ls                                                                                                    
employee.txt  fruit.txt  output.txt  sample.txt                                                                                                            
[s2022103042@centos8-linux Wed May 15 06:01 PM wk3]$ cat employee.txt                                                                                      
ajay manager account 45000                                                                                                                                 
                                                                                                                                                           
sunil clerk account 25000                                                                                                                                  
                                                                                                                                                           
varun manager sales 50000                                                                                                                                  
                                                                                                                                                           
amit manager account 47000                                                                                                                                 
                                                                                                                                                           
tarun peon sales 15000                                                                                                                                     
                                                                                                                                                           
deepak clerk sales 23000                                                                                                                                   
                                                                                                                                                           
sunil peon sales 13000                                                                                                                                     
                                                                                                                                                           
satvik director purchase 80000                                                                                                                             
[s2022103042@centos8-linux Wed May 15 06:02 PM wk3]$ cat fruit.txt                                                                                         
fruit cost quantity                                                                                                                                        
apple 120 1kg                                                                                                                                              
mango 70 1kg                                                                                                                                               
grapes 50 500g                                                                                                                                             
banana 45 12p                                                                                                                                              
watermelon 80 1p                                                                                                                                           
papaya 20 1p                                                                                                                                               
bcd                                                                                                                                                        
[s2022103042@centos8-linux Wed May 15 06:02 PM wk3]$ cat output.txt                                                                                        
ajay manager account 45000                                                                                                                                 
amit manager account 47000                                                                                                                                 
satvik director purchase 80000                                                                                                                             
[s2022103042@centos8-linux Wed May 15 06:02 PM wk3]$ cat sample.txt                                                                                        
unix is great os. unix was developed in Bell labs.                                                                                                         
                                                                                                                                                           
learn operating system.                                                                                                                                    
                                                                                                                                                           
Unix linux which one you choose.                                                                                                                           
                                                                                                                                                           
uNix is easy to ulearn. unix is a multiuser os. Learn unix. unix is a powerful.    















Week 4

[s2022103042@centos8-linux Wed May 15 06:02 PM wk3]$ cd ..                                                                                                 
[s2022103042@centos8-linux Wed May 15 06:02 PM os]$ cd wk4                                                                                                 
[s2022103042@centos8-linux Wed May 15 06:02 PM wk4]$ ls                                                                                                    
cam.txt  ex10  ex2  ex4  ex6  ex8  file.txt  p11.c  p2.c  p4.c  p6.c  p8.c  samp.txt  sp1.c  sp2.c
ex1      ex11  ex3  ex5  ex7  ex9  p10.c     p1.c   p3.c  p5.c  p7.c  p9.c  sam.txt   sp2
[s2022103042@centos8-linux Wed May 15 06:02 PM wk4]$ cat p1.c                                                                                              
#include<sys/stat.h>                                                                                                                                       
#include<fcntl.h>                                                                                                                                          
#include<stdio.h>                                                                                                                                          
#include<string.h>                                                                                                                                         
#include<unistd.h>                                                                                                                                         
int main()                                                                                                                                                 
{                                                                                                                                                          
        open("file.txt",O_CREAT,S_IRWXU);                                                                                                                  
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:02 PM wk4]$ cat p2.c                                                                                              
#include<sys/stat.h>                                                                                                                                       
#include<fcntl.h>                                                                                                                                          
#include<stdio.h>                                                                                                                                          
#include<string.h>                                                                                                                                         
#include<unistd.h>                                                                                                                                         
int main(){                                                                                                                                                
        int fd;                                                                                                                                            
        char x[15]="HELLO";                                                                                                                                
        fd=open("file.txt",O_RDWR);                                                                                                                        
        write(fd,x,strlen(x));                                                                                                                             
        close(fd);                                                                                                                                         
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:02 PM wk4]$ cat p3.c                                                                                              
#include<sys/stat.h>                                                                                                                                       
#include<fcntl.h>                                                                                                                                          
#include<string.h>                                                                                                                                         
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
int main()                                                                                                                                                 
{                                                                                                                                                          
        int fd;                                                                                                                                            
        char y[15];                                                                                                                                        
        fd=open("file.txt",O_RDWR);                                                                                                                        
        read(fd,y,15);                                                                                                                                     
        printf("%s\n",y);                                                                                                                                  
        close(fd);                                                                                                                                         
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:02 PM wk4]$ cat p4.c                                                                                              
#include<sys/stat.h>                                                                                                                                       
#include<fcntl.h>                                                                                                                                          
#include<string.h>                                                                                                                                         
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
int main(){                                                                                                                                                
        int fd;                                                                                                                                            
        char rbuf[15];                                                                                                                                     
        fd=open("file.txt",O_RDWR);                                                                                                                        
        lseek(fd,-1,SEEK_END);                                                                                                                             
        read(fd,rbuf,1);                                                                                                                                   
        printf("%s\n",rbuf);                                                                                                                               
        close(fd);                                                                                                                                         
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p5.c                                                                                              
#include<sys/types.h>                                                                                                                                      
#include<fcntl.h>                                                                                                                                          
#include<string.h>                                                                                                                                         
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
void main(){                                                                                                                                               
        int old_fd,new_fd;                                                                                                                                 
        old_fd=open("file.txt",O_RDWR);                                                                                                                    
        printf("file description is %d\n",old_fd);                                                                                                         
        new_fd=dup(old_fd);                                                                                                                                
        printf("new file description is %d\n",new_fd);                                                                                                     
        int close(int old_fd);                                                                                                                             
        int close(int new_fd);                                                                                                                             
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p6.c                                                                                              
#include<sys/stat.h>                                                                                                                                       
#include<fcntl.h>                                                                                                                                          
#include<string.h>                                                                                                                                         
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
#include<sys/types.h>                                                                                                                                      
int main()                                                                                                                                                 
{                                                                                                                                                          
        char str1[5],str2[10];                                                                                                                             
        int n,fd,fd1,n1;                                                                                                                                   
        fd=open("file.txt",O_APPEND|O_RDWR);                                                                                                               
        fd1=dup(fd);                                                                                                                                       
        n=read(fd,str1,5);                                                                                                                                 
        write(1,str1,n);                                                                                                                                   
        printf("\n");                                                                                                                                      
        write(1,"enter a string",15);                                                                                                                      
        n1=read(0,str2,n1);                                                                                                                                
        write(fd1,str2,n1);                                                                                                                                
        int close(int fd1);                                                                                                                                
        int close(int fd);                                                                                                                                 
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p7.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<dirent.h>                                                                                                                                         
#include<string.h>                                                                                                                                         
int main()                                                                                                                                                 
{                                                                                                                                                          
        DIR *dir;                                                                                                                                          
        struct dirent *a;                                                                                                                                  
        dir=opendir(".");                                                                                                                                  
        while((a=readdir(dir))!=NULL){                                                                                                                     
                int n=strlen(a->d_name);                                                                                                                   
                if(a->d_name[n-1]=='t' && a->d_name[n-2]=='x' && a->d_name[n-3]=='t' && a->d_name[n-4]=='.')                                               
                        printf(".TXTFILE %s\n",a->d_name);                                                                                                 
        }                                                                                                                                                  
        closedir(dir);                                                                                                                                     
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p8.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<dirent.h>                                                                                                                                         
int main()                                                                                                                                                 
{                                                                                                                                                          
        DIR *dir;                                                                                                                                          
        struct dirent *a;                                                                                                                                  
        char str[15];                                                                                                                                      
        printf("enter the path:");                                                                                                                         
        scanf("%s",str);                                                                                                                                   
        dir=opendir(str);                                                                                                                                  
        while((a=readdir(dir))!=NULL){                                                                                                                     
                printf("FILE: %s\n",a->d_name);                                                                                                            
        }                                                                                                                                                  
        closedir(dir);                                                                                                                                     
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p9.c                                                                                              
#include<dirent.h>                                                                                                                                         
#include<unistd.h>                                                                                                                                         
#include<fcntl.h>                                                                                                                                          
#include<sys/stat.h>                                                                                                                                       
#include<sys/types.h>                                                                                                                                      
#include<stdio.h>                                                                                                                                          
#include<stdlib.h>                                                                                                                                         
int main()                                                                                                                                                 
{                                                                                                                                                          
        struct dirent ** namelist;                                                                                                                         
        int n=scandir(".",&namelist,NULL,alphasort);                                                                                                       
        while(n--){                                                                                                                                        
                printf("%s\n",namelist[n]->d_name);                                                                                                        
                free(namelist[n]);                                                                                                                         
        }                                                                                                                                                  
        free(namelist);                                                                                                                                    
        exit(EXIT_SUCCESS);                                                                                                                                
}                                                                                                                                                          
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p10.c                                                                                             
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
#include<fcntl.h>                                                                                                                                          
#include<sys/stat.h>                                                                                                                                       
#include<sys/types.h>                                                                                                                                      
int main(){                                                                                                                                                
        int fd,fd1;                                                                                                                                        
        fd=open("file.txt",O_RDWR|O_APPEND);                                                                                                               
        printf("old file description: %d\n",fd);                                                                                                           
        fd1=dup2(fd,1);                                                                                                                                    
        printf("new file description: %d\n",fd1);                                                                                                          
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p11.c                                                                                             
#include<dirent.h>                                                                                                                                         
#include<string.h>                                                                                                                                         
#include<sys/stat.h>                                                                                                                                       
#include<fcntl.h>                                                                                                                                          
#include<string.h>                                                                                                                                         
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
#include<sys/types.h>                                                                                                                                      
int main()                                                                                                                                                 
{                                                                                                                                                          
        char str1[50],str2[50];                                                                                                                            
        int n,fd,fd1,n1;                                                                                                                                   
        fd=open("file.txt",O_RDWR);                                                                                                                        
        DIR *dir;                                                                                                                                          
        struct dirent *a;                                                                                                                                  
        dir=opendir(".");                                                                                                                                  
        while((a=readdir(dir))!=NULL){                                                                                                                     
                int n=strlen(a->d_name);                                                                                                                   
                if(a->d_name[n-1]=='t' && a->d_name[n-2]=='x' && a->d_name[n-3]=='t' && a->d_name[n-4]=='.' && a->d_name[n-5]=='m' && a->d_name[n-6]=='a' &
& a->d_name[n-7]=='c'){                                                                                                                                    
                        write(1,"do you need to over write:(0/1)",25);                                                                                     
                        n1=read(0,str2,25);                                                                                                                
                        if(str2==0){                                                                                                                       
                                fd1=open("cam.txt",O_WRONLY);                                                                                              
                        }                                                                                                                                  
                }                                                                                                                                          
                int cnt=1;                                                                                                                                 
        }                                                                                                                                                  
                        fd1=open("cam.txt",O_CREAT,S_IRWXU);                                                                                               
        read(fd,str1,50);                                                                                                                                  
        write(fd1,str1,50);                                                                                                                                
        printf("\n");                                                                                                                                      
        int close(int fd1);                                                                                                                                
        int close(int fd);                                                                                                                                 
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat p12.c                                                                                             
cat: p12.c: No such file or directory                                                                                                                      
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ ls                                                                                                    
cam.txt  ex10  ex2  ex4  ex6  ex8  file.txt  p11.c  p2.c  p4.c  p6.c  p8.c  samp.txt  sp1.c  sp2.c
ex1      ex11  ex3  ex5  ex7  ex9  p10.c     p1.c   p3.c  p5.c  p7.c  p9.c  sam.txt   sp2
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat sp1.c                                                                                             
nclude<sys/stat.h>                                                                                                                                         

                                                                                                                                                           
#include<fcntl.h>                                                                                                                                          

                                                                                                                                                           
#include<stdio.h>                                                                                                                                          

                                                                                                                                                           
#include<string.h>                                                                                                                                         

                                                                                                                                                           
#include<unistd.h>                                                                                                                                         

                                                                                                                                                           
int main(){                                                                                                                                                

                                                                                                                                                           
                int fd;                                                                                                                                    

                                                                                                                                                           
                        char str[50];                                                                                                                      

                                                                                                                                                           
                                fd=open("file.txt",O_RDWR);                                                                                                

                                                                                                                                                           
                                        read(fd,str,100);                                                                                                  

                                                                                                                                                           
                                                int fd1,n;                                                                                                 

                                                                                                                                                           
                                                        fd1=open("d.txt",O_RDWR);                                                                          

                                                                                                                                                           
                                                                printf("\n%d",fd1);                                                                        

                                                                                                                                                           
                                                                        if(fd1==4){                                                                        

                                                                                                                                                           
                                                                                                //open("fil.txt",O_CREAT,S_IRWXU);                         

                                                                                                //                                                         
                                                                                                //                printf("\nDo you want to overwrite?\n"); 

                                                                                                //
                                                                                                //                                scanf("%d",&n);          


                                                                                                //                                                         
                                                                                                //                                                if(n==1){


                                                                                                //                                                         
                                                                                                //                                                         
               write(fd1,str,strlen(str));                                                                                                                 

                                                                                                //                                                         
                                                                                                //                                                         
                               }                                                                                                                           

                                                                                                //                                                         
                                                                                                //                                                         
                                               else{                                                                                                       

                                                                                                //                                                         
                                                                                                //                                                         
                                                                       printf("\nCan't overwrite\n");                                                      

                                                                                                //                                                         
                                                                                                //                                                         
                                                                                       }                                                                   

                                                                                                //                                                         
                                                                                                //                                                         
                                                                                               }                                                           

                                                                                                //                                                         
                                                                                                //                                                         
                                                                                                       if(fd1==-1){                                        

                                                                                                //                                                         
                                                                                                //                                                         
                                                                                                                       open("d.txt",O_CREAT,S_IRWXU);      


                                                                                                //                                                         
                                                                                                //                                                         
                                                                                                                                       int fd2=open("d.txt"
,O_RDWR);                                                                                                                                                  

                                                                                                //                                                         
                                                                                                //                                                         
                                                                                                                                                       writ
e(fd2,str,strlen(str));                                                                                                                                    
                                                                                                //                                                         
                                                                                                //                                                         

    }                                                                                                                                                      

                                                                                                //                                                         
                                                                                                //                                                         



                                                                                                //                                                         
                                                                                                //                                                         


                                                            }                                                                                              
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat sp2.c                                                                                             
#include<stdio.h>                                                                                                                                          

                                                                                                                                                           
#include<time.h>                                                                                                                                           

                                                                                                                                                           
int main()                                                                                                                                                 

                                                                                                                                                           
{                                                                                                                                                          

                                                                                                                                                           
                time_t now;                                                                                                                                

                                                                                                                                                           
                        struct tm * current_time;                                                                                                          

                                                                                                                                                           
                                time(&now);                                                                                                                

                                                                                                                                                           
                                        current_time=localtime(&now);                                                                                      

                                                                                                                                                           
                                                current_time->tm_mday+=2;                                                                                  
                                                                                                                                                           
                                                        mktime(current_time);                                                                              

                                                                                                                                                           
                                                                printf("Two day:%02d|%02d|%d%02d:%02d:%o2d \n" ,current_time->tm_mon+1,current_time->tm_mda
y,current_time->tm_year+1900,current_time->tm_hour,current_time->tm_min,current_time->tm_sec);                                                             
                                                                                                                                                           
                                                                                return 0;                                                                  

                                                                                                                                                           
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:03 PM wk4]$ cat sam.txt                                                                                           
cat: sam.txt: Permission denied                                                                                                                            
[s2022103042@centos8-linux Wed May 15 06:04 PM wk4]$ cat samp.txt                                                                                          
cat: samp.txt: Permission denied                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:04 PM wk4]$ ls                                                                                                    
cam.txt  ex10  ex2  ex4  ex6  ex8  file.txt  p11.c  p2.c  p4.c  p6.c  p8.c  samp.txt  sp1.c  sp2.c
ex1      ex11  ex3  ex5  ex7  ex9  p10.c     p1.c   p3.c  p5.c  p7.c  p9.c  sam.txt   sp2





























Week 5

[s2022103042@centos8-linux Wed May 15 06:04 PM wk4]$ cd ..                                                                                                 
[s2022103042@centos8-linux Wed May 15 06:04 PM os]$ cd wk5                                                                                                 
[s2022103042@centos8-linux Wed May 15 06:04 PM wk5]$ ls                                                                                                    
ex1  ex2  ex3  ex4  ex5  ex6  ex7  ex8  p1.c  p2.c  p3.c  p4.c  p5.c  p6.c  p7.c  p8.c
[s2022103042@centos8-linux Wed May 15 06:04 PM wk5]$ cat p1.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <dirent.h>                                                                                                                                        
int main() {                                                                                                                                               
        DIR *dir = opendir(".");                                                                                                                           
        if (dir == NULL) {                                                                                                                                 
                perror("Error opening directory");                                                                                                         
                return 1;                                                                                                                                  
        }                                                                                                                                                  

        closedir(dir);                                                                                                                                     
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:04 PM wk5]$ cat p2.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <dirent.h>                                                                                                                                        
int main() {                                                                                                                                               
        DIR *dir = opendir(".");                                                                                                                           
         if (dir == NULL)                                                                                                                                  
         {                                                                                                                                                 
                  perror("Error opening directory");                                                                                                       

                  return 1;                                                                                                                                

         }                                                                                                                                                 
         struct dirent entry, *result;                                                                                                                     
         while (readdir_r(dir, &entry, &result) == 0 && result != NULL)                                                                                    
         {                                                                                                                                                 
                  printf("%s\n", entry.d_name);                                                                                                            

         }                                                                                                                                                 
         closedir(dir);                                                                                                                                    
         return 0;                                                                                                                                         
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:04 PM wk5]$ cat p3.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <sys/stat.h>                                                                                                                                      
int main(){                                                                                                                                                
        struct stat info;                                                                                                                                  
        if (lstat(".", &info) == -1) {                                                                                                                     
                perror("Error getting file status");                                                                                                       
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        printf("File type: ");                                                                                                                             
        if (S_ISREG(info.st_mode))                                                                                                                         
                printf("Regular file\n");                                                                                                                  
        else if (S_ISDIR(info.st_mode))                                                                                                                    
                printf("Directory\n");                                                                                                                     

        else if (S_ISLNK(info.st_mode))                                                                                                                    
                printf("Symbolic link\n");                                                                                                                 
        else                                                                                                                                               
                printf("Unknown\n");                                                                                                                       
        printf("Size: %ld bytes\n", info.st_size);                                                                                                         
        printf("Last modified time: %ld\n", info.st_mtime);                                                                                                
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:04 PM wk5]$ cat p4.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <dirent.h>                                                                                                                                        
int main() {                                                                                                                                               
        DIR *dir = opendir(".");                                                                                                                           
        if (dir == NULL) {                                                                                                                                 
                perror("Error opening directory");                                                                                                         
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        struct dirent *entry;                                                                                                                              
        while ((entry = readdir(dir)) != NULL) {                                                                                                           
                printf("%s\n", entry->d_name);                                                                                                             
        }                                                                                                                                                  
        rewinddir(dir);                                                                                                                                    
        printf("\nAfter rewind:\n");                                                                                                                       
        while ((entry = readdir(dir)) != NULL) {                                                                                                           
                printf("%s\n", entry->d_name);                                                                                                             
        }                                                                                                                                                  
        closedir(dir);                                                                                                                                     
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:04 PM wk5]$ ct p5.c                                                                                               
bash: ct: command not found...                                                                                                                             
Similar command is: 'tc'                                                                                                                                   
[s2022103042@centos8-linux Wed May 15 06:04 PM wk5]$ cat p5.c                                                                                              

#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <ftw.h>                                                                                                                                           
int display_info(const char *fpath, const struct stat *sb, int typeflag) {                                                                                 
        printf("%s\n", fpath);                                                                                                                      return 
0; // Continue traversal                                                                                                                                   
}                                                                                                                                                          
int main() {                                                                                                                                               
        if (ftw(".", display_info, 20) == -1) {                                                                                                            
                perror("Error walking directory");                                                                                                         
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
                                                                                                                                                           
[s2022103042@centos8-linux Wed May 15 06:05 PM wk5]$ cat p6.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <sys/stat.h>                                                                                                                                      
#include<time.h>                                                                                                                                           
int main() {                                                                                                                                               
        struct stat info;                                                                                                                                  
        if (stat(".", &info) == -1) {                                                                                                                      
                perror("Error getting file status");                                                                                                       
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        printf("File type: ");                                                                                                                             
        if (S_ISREG(info.st_mode))                                                                                                                         
                printf("Regular file\n");                                                                                                                  
        else if (S_ISDIR(info.st_mode))                                                                                                                    
                printf("Directory\n");                                                                                                                     
        else if (S_ISLNK(info.st_mode))                                                                                                                    
                printf("Symbolic link\n");                                                                                                                 
        else                                                                                                                                               
                printf("Unknown\n");                                                                                                                       
        printf("Size: %ld bytes\n", info.st_size);                                                                                                         
        printf("Permissions: %o\n", info.st_mode & 0777);                                                                                                  
        printf("Owner ID: %d\n", info.st_uid);                                                                                                             
        printf("Group ID: %d\n", info.st_gid);                                                                                                             
        printf("Last access time: %s", ctime(&info.st_atime));                                                                                             
        printf("Last modification time: %s", ctime(&info.st_mtime));                                                                                       
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:05 PM wk5]$ cat p7.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <dirent.h>                                                                                                                                        
#include <string.h>                                                                                                                                        
int main() {                                                                                                                                               
        DIR *dir;                                                                                                                                          
        struct dirent *entry;                                                                                                                              
        long int pos;                                                                                                                                      
        dir = opendir(".");                                                                                                                                
        if (dir == NULL) {                                                                                                                                 
                perror("Unable to open directory");                                                                                                        
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        pos = telldir(dir);                                                                                                                                
        printf("Current position in directory: %ld\n", pos);                                                                                               
        rewinddir(dir);                                                                                                                                    
        pos = telldir(dir);                                                                                                                                
        printf("Position after rewind: %ld\n", pos);                                                                                                       
        seekdir(dir, 2);                                                                                                                                   
        int skipped = 0;                                                                                                                                   
        while ((entry = readdir(dir)) != NULL) {                                                                                                           
                if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {                                                                 
                        skipped++;                                                                                                                         
                        continue;                                                                                                                          
                }                                                                                                                                          
                if (skipped > 0) {                                                                                                                         
                        printf("%d entry in directory: %s\n", skipped + 1, entry->d_name);                                                                 
                        break;                                                                                                                             
                }                                                                                                                                          
        }                                                                                                                                                  
        closedir(dir);                                                                                                                                     
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:05 PM wk5]$ cat p8.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <dirent.h>                                                                                                                                        
#include <unistd.h>                                                                                                                                        
#include <errno.h>                                                                                                                                         
int main() {                                                                                                                                               
        DIR *dir;                                                                                                                                          
        struct dirent *entry;                                                                                                                              
        dir = opendir(".");                                                                                                                                
        if (dir == NULL) {                                                                                                                                 
                perror("Unable to open directory");                                                                                                        
                return 1;                                                                                                                                  
        }                                                                                                                                                  

        int dir_fd = dirfd(dir);                                                                                                                           
        if (dir_fd == -1) {                                                                                                                                
                perror("Failed to obtain file descriptor");                                                                                                
                closedir(dir);                                                                                                                             
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        printf("Directory listing:\n");                                                                                                                    
        while ((entry = readdir(dir)) != NULL) {                                                                                                           
                printf("%s\n", entry->d_name);                                                                                                             
        }                                                                                                                                                  
        closedir(dir);                                                                                                                                     
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:05 PM wk5]$ ls                                                                                                    
ex1  ex2  ex3  ex4  ex5  ex6  ex7  ex8  p1.c  p2.c  p3.c  p4.c  p5.c  p6.c  p7.c  p8.c
[s2022103042@centos8-linux Wed May 15 06:05 PM wk5]$ 


































Week 6

[s2022103042@centos8-linux Wed May 15 06:07 PM os]$ cd wk6                                                                                                 
[s2022103042@centos8-linux Wed May 15 06:07 PM wk6]$ ls                                                                                                    
ex1   ex11  ex2  ex4  ex6  ex8  p10.c  p1.c  p3.c  p5.c  p7.c  p9.c  s1.c  s2.c
ex10  ex12  ex3  ex5  ex7  ex9  p11.c  p2.c  p4.c  p6.c  p8.c  s1    s2    spot
[s2022103042@centos8-linux Wed May 15 06:07 PM wk6]$ cat p1.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
int main(int argc,char *arg[]){                                                                                                                            
        pid_t pid=fork();                                                                                                                                  
        printf("current pid= %d\ncurrent ppid= %d\n",getpid(),getppid());                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p2.c                                                                                              
#include<unistd.h>                                                                                                                                         
#include<stdio.h>                                                                                                                                          
int main()                                                                                                                                                 
{                                                                                                                                                          
        int i;                                                                                                                                             
        printf("parent pid= %d\n",getppid());                                                                                                              
        for(i=0; i<3; i++) fork();                                                                                                                         
        printf("current pid= %d\t current parent pid= %d\n", getpid(), getppid());                                                                         
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p3.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <unistd.h>                                                                                                                                        
int main() {                                                                                                                                               
        execl("/bin/ls", "ls", "-1",NULL);                                                                                                                 
        printf("This line will not be executed\n");                                                                                                        
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p4.c                                                                                              
#include<stdio.h>                                                                                                                                          
int main(int argc, char* argv[])                                                                                                                           
{                                                                                                                                                          
        printf("%s %s\n",argv[0],argv[1]);                                                                                                                 
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p5.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
#include <sys/wait.h>                                                                                                                                      
int main()                                                                                                                                                 
{                                                                                                                                                          
        pid_t p1 = fork();                                                                                                                                 
        pid_t p2 = fork();                                                                                                                                 
        if(!(p1 == 0 && p2 != 0)) wait(NULL);                                                                                                              
        if(p1 == 0 && p2 != 0) goto there; if(p1 != 0 && p2 == 0) wait(NULL);                                                                              
        if(!(p1 == 0 && p2 == 0)) wait(NULL); if(p1 == 0 && p2 == 0) goto there;                                                                           
        if(!(p1 != 0 && p2 != 0)) wait(NULL);                                                                                                              
there:                                                                                                                                                     
        if(p1 != 0 && p2 != 0)                                                                                                                             
                printf("Parent pid= %d\n", getpid());                                                                                                      
        else                                                                                                                                               
                printf("Child pid= %d with parent pid= %d\n", getpid(), getppid());                                                                        
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p6.c                                                                                              
#define _GNU_SOURCE                                                                                                                                        
#include <stdio.h>                                                                                                                                         
#include <unistd.h>                                                                                                                                        
#include <sched.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/wait.h>                                                                                                                                      
#define STACK_SIZE 65536 // 64 KB stack size                                                                                                               
int child_func(void *arg) {                                                                                                                                
        printf("Child process\n");                                                                                                                         
        return 0;                                                                                                                                          
}                                                                                                                                                          
int main() {                                                                                                                                               
        char *stack = malloc(STACK_SIZE);                                                                                                                  
        if (stack == NULL) {                                                                                                                               
                perror("malloc");                                                                                                                          
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        pid_t pid = clone(child_func, stack + STACK_SIZE, CLONE_VM | SIGCHLD, NULL);                                                                       
        if (pid == -1) {                                                                                                                                   
                perror("clone");                                                                                                                           
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        printf("Parent process\n");                                                                                                                        
        waitpid(pid, NULL, 0);                                                                                                                             
        free(stack);                                                                                                                                       
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p7.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/wait.h>                                                                                                                                      
#include <unistd.h>                                                                                                                                        
int main() {                                                                                                                                               
        int pid = fork();                                                                                                                                  
        if (pid == 0) {                                                                                                                                    
                printf("Child process\n");                                                                                                                 
                sleep(2);                                                                                                                                  
                exit(0);                                                                                                                                   
        } else if (pid > 0) {                                                                                                                              
                printf("Parent process\n");                                                                                                                
                int status;                                                                                                                                
                wait(&status);                                                                                                                             
                printf("Child process exited with status: %d\n", WEXITSTATUS(status));                                                                     
        } else {                                                                                                                                           
                fprintf(stderr, "Fork failed\n");                                                                                                          
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p8.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
int main() {                                                                                                                                               
            printf("Before exit\n");                                                                                                                       
            exit(0);                                                                                                                                       
            printf("After exit\n"); // This line will not be executed                                                                                      
            return 0;                                                                                                                                      
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p9.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <pthread.h>                                                                                                                                       
void *thread_func(void *arg) {                                                                                                                             
        printf("Thread running\n");                                                                                                                        
        pthread_exit(NULL);                                                                                                                                
}                                                                                                                                                          
int main() {                                                                                                                                               
        pthread_t tid;                                                                                                                                     
        pthread_create(&tid, NULL, thread_func, NULL);                                                                                                     
        pthread_join(tid, NULL);                                                                                                                           
        printf("Main thread exiting\n");                                                                                                                   
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p10.c                                                                                             
#include <stdio.h>                                                                                                                                         
#include <pthread.h>                                                                                                                                       
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;                                                                                                         
int counter = 0;                                                                                                                                           
void *thread_func(void *arg) {                                                                                                                             
        pthread_mutex_lock(&mutex);                                                                                                                        
        counter++;                                                                                                                                         
        printf("Thread incrementing counter: %d\n", counter);                                                                                              
        pthread_mutex_unlock(&mutex);                                                                                                                      
        pthread_exit(NULL);                                                                                                                                
}                                                                                                                                                          
int main() {                                                                                                                                               
        pthread_t tid[5];                                                                                                                                  
        for (int i = 0; i < 5; i++) {                                                                                                                      
                pthread_create(&tid[i], NULL, thread_func, NULL);                                                                                          
        }                                                                                                                                                  
        for (int i = 0; i < 5; i++) {                                                                                                                      
                pthread_join(tid[i], NULL);                                                                                                                
        }                                                                                                                                                  
        printf("Final counter value: %d\n", counter);                                                                                                      
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p11.c                                                                                             
#include <stdio.h>                                                                                                                                         
#include <pthread.h>                                                                                                                                       
#include <semaphore.h>                                                                                                                                     
sem_t semaphore;                                                                                                                                           
int counter = 0;                                                                                                                                           
void *thread_func(void *arg) {                                                                                                                             
        sem_wait(&semaphore);                                                                                                                              
        counter++;                                                                                                                                         
        printf("Thread incrementing counter: %d\n", counter);                                                                                              
        sem_post(&semaphore);                                                                                                                              
        pthread_exit(NULL);                                                                                                                                
}                                                                                                                                                          
int main() {                                                                                                                                               
        sem_init(&semaphore, 0, 1);                                                                                                                        
        pthread_t tid[5];                                                                                                                                  
        for (int i = 0; i < 5; i++) {                                                                                                                      
                pthread_create(&tid[i], NULL, thread_func, NULL);                                                                                          
        }                                                                                                                                                  
        for (int i = 0; i < 5; i++) {                                                                                                                      
                pthread_join(tid[i], NULL);                                                                                                                
        }                                                                                                                                                  
        printf("Final counter value: %d\n", counter);                                                                                                      
        sem_destroy(&semaphore);                                                                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat p12.c                                                                                             
cat: p12.c: No such file or directory                                                                                                                      
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ ls                                                                                                    
ex1   ex11  ex2  ex4  ex6  ex8  p10.c  p1.c  p3.c  p5.c  p7.c  p9.c  s1.c  s2.c
ex10  ex12  ex3  ex5  ex7  ex9  p11.c  p2.c  p4.c  p6.c  p8.c  s1    s2    spot
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat s1.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
void main(){                                                                                                                                               
        int i;                                                                                                                                             
        for(i=1;i<=4;i++){                                                                                                                                 
                if(fork()==0){                                                                                                                             
                        printf(" %d child process created\n",i);                                                                                           
                        break;                                                                                                                             
                }                                                                                                                                          
        }                                                                                                                                                  
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:08 PM wk6]$ cat s2.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
void createbinarytree(int depth,int currentdepth){                                                                                                         
        if(currentdepth>=depth){                                                                                                                           
                return ;                                                                                                                                   
        }                                                                                                                                                  

        if(fork()==0){                                                                                                                                     
                printf("\nCHILD PID : %d , PARENT PID : %d\n",getpid(),getppid());                                                                         
                createbinarytree(depth,currentdepth+1);                                                                                                    
        }                                                                                                                                                  

}                                                                                                                                                          

int main(){                                                                                                                                                
        int depth;                                                                                                                                         
        printf("ENTER THE NUMBER OF NODES IN THE BINARY TREE : ");                                                                                         
        scanf("%d",&depth);                                                                                                                                
        printf("PARENT PID : %d\n",getpid());                                                                                                              
        createbinarytree(depth,0);                                                                                                                         
        return 0;                                                                                                                                          
}
                                                                                                      
  







Week 7

[s2022103042@centos8-linux Wed May 15 05:53 PM os]$ cd wk7                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:53 PM wk7]$ ls                                                                                                    
ex1  ex2  ex3  ex4  ex5  ex6  ex7  fifo  p1.c  p2.c  p3.c  p4.c  p5.c  p6.c  p7.c  sp1  sp1.c  sp2  sp2.c
[s2022103042@centos8-linux Wed May 15 05:53 PM wk7]$ cat p1.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <unistd.h>                                                                                                                                        
int main() {                                                                                                                                               
        int pipe_fd[2];                                                                                                                                    
        pid_t pid;                                                                                                                                         
        char buffer[20];                                                                                                                                   
        pipe(pipe_fd);                                                                                                                                     
        pid = fork();                                                                                                                                      
        if (pid == 0) {                                                                                                                                    
                close(pipe_fd[1]);                                                                                                                         
                read(pipe_fd[0], buffer, sizeof(buffer));                                                                                                  
                printf("Child received: %s\n", buffer);                                                                                                    
                close(pipe_fd[0]);                                                                                                                         
        } else { // Parent process                                                                                                                         
                close(pipe_fd[0]);                                                                                                                         
                write(pipe_fd[1], "Hello, child!", 13);                                                                                                    
                printf("parent process written\n");                                                                                                        
                close(pipe_fd[1]);                                                                                                                         
        }                                                                                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:53 PM wk7]$ cat p2.c                                                                                              
                                                                                                                                                           
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
int main() {                                                                                                                                               
        int pipefds[2];                                                                                                                                    
        int returnstatus;                                                                                                                                  
        char writemessages[2][20]={"Hi", "Hello"};                                                                                                         
        char readmessage[20];                                                                                                                              
        returnstatus = pipe(pipefds);                                                                                                                      
        if (returnstatus == -1) {                                                                                                                          
                printf("Unable to create pipe\n");                                                                                                         
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        printf("Writing to pipe - Message 1 is %s\n", writemessages[0]);                                                                                   
        write(pipefds[1], writemessages[0], sizeof(writemessages[0]));                                                                                     
        read(pipefds[0], readmessage, sizeof(readmessage));                                                                                                
        printf("Reading from pipe – Message 1 is %s\n", readmessage);                                                                                      
        printf("Writing to pipe - Message 2 is %s\n", writemessages[1]);                                                                                   
        write(pipefds[1], writemessages[1], sizeof(writemessages[0]));                                                                                     
        read(pipefds[0], readmessage, sizeof(readmessage));                                                                                                
        printf("Reading from pipe – Message 2 is %s\n", readmessage);                                                                                      
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat p3.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <unistd.h>                                                                                                                                        
#include <sys/types.h>                                                                                                                                     
#include <sys/stat.h>                                                                                                                                      
#include <fcntl.h>                                                                                                                                         
int main() {                                                                                                                                               
        mkfifo("fifo", 0666);                                                                                                                              
        int fd1 = open("fifo", O_RDWR);                                                                                                                    
        int fd2 = open("fifo", O_RDWR);                                                                                                                    
        pid_t pid = fork();                                                                                                                                
        if (pid == 0) {                                                                                                                                    
                char msg[20];                                                                                                                              
                read(fd1, msg, sizeof(msg));                                                                                                               
                printf("Child received: %s\n", msg);                                                                                                       
                close(fd1);                                                                                                                                
                write(fd2, "Hello, parent!", 14);                                                                                                          
                close(fd2);                                                                                                                                
        } else {                                                                                                                                           
                write(fd1, "Hello, child!", 13);                                                                                                           
                close(fd1);                                                                                                                                
                wait(NULL);                                                                                                                                
                char msg[20];                                                                                                                              
                read(fd2, msg, sizeof(msg));                                                                                                               
                printf("Parent received: %s\n", msg);                                                                                                      
                close(fd2);                                                                                                                                
        }                                                                                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat p4.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
int main() {                                                                                                                                               
        int pipefds1[2], pipefds2[2];                                                                                                                      
        int returnstatus1, returnstatus2;                                                                                                                  
        int pid;                                                                                                                                           
        char pipe1writemessage[20] = "Hi";                                                                                                                 
        char pipe2writemessage[20] = "Hello";                                                                                                              
        char readmessage[20];                                                                                                                              
        returnstatus1 = pipe(pipefds1);                                                                                                                    
                                                                                                                                                           
        if (returnstatus1 == -1) {                                                                                                                         
                printf("Unable to create pipe 1 \n");                                                                                                      
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        returnstatus2 = pipe(pipefds2);                                                                                                                    
                                                                                                                                                           
        if (returnstatus2 == -1) {                                                                                                                         
                printf("Unable to create pipe 2 \n");                                                                                                      
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        pid = fork();                                                                                                                                      
                                                                                                                                                           
        if (pid != 0) {                                                                                                                                    
                close(pipefds1[0]); // Close the unwanted pipe1 read side                                                                                  
        close(pipefds2[1]); // Close the unwanted pipe2 write side                                                                                         
        printf("In Parent: Writing to pipe 1 – Message is %s\n", pipe1writemessage);                                                                       
        write(pipefds1[1], pipe1writemessage, sizeof(pipe1writemessage));                                                                                  
        read(pipefds2[0], readmessage, sizeof(readmessage));                                                                                               
        printf("In Parent: Reading from pipe 2 – Message is %s\n", readmessage);                                                                           
} else { //child process                                                                                                                                   
        close(pipefds1[1]); // Close the unwanted pipe1 write side                                                                                         
        close(pipefds2[0]); // Close the unwanted pipe2 read side                                                                                          
        read(pipefds1[0], readmessage, sizeof(readmessage));                                                                                               
        printf("In Child: Reading from pipe 1 – Message is %s\n", readmessage);                                                                            
        printf("In Child: Writing to pipe 2 – Message is %s\n", pipe2writemessage);                                                                        
        write(pipefds2[1], pipe2writemessage, sizeof(pipe2writemessage));                                                                                  
}                                                                                                                                                          
return 0;                                                                                                                                                  
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat p5.c                                                                                              
#include<stdio.h>                                                                                                                                          
#include<unistd.h>                                                                                                                                         
#include<sys/types.h>                                                                                                                                      
#include<sys/wait.h>                                                                                                                                       
#define NUM_PIPES 3 // Define the number of pipes                                                                                                          
int main() {                                                                                                                                               
        int fds[NUM_PIPES][2]; // Array to hold file descriptors for multiple pipes                                                                        
        char buffer[100];                                                                                                                                  
        pid_t p;                                                                                                                                           
        for (int i = 0; i < NUM_PIPES; i++) {                                                                                                              
                if (pipe(fds[i]) == -1) {                                                                                                                  
                        perror("pipe");                                                                                                                    
                        return 1;                                                                                                                          
                }                                                                                                                                          
        }                                                                                                                                                  
        p = fork();                                                                                                                                        
        if (p > 0) { // Parent process                                                                                                                     
                printf("Parent Passing value to child\n");                                                                                                 
                for (int i = 0; i < NUM_PIPES; i++) {                                                                                                      
                        write(fds[i][1], "hello\n", 6);                                                                                                    
                }                                                                                                                                          
        } else if (p == 0) { // Child process                                                                                                              
                printf("Child printing received value\n");                                                                                                 
                for (int i = 0; i < NUM_PIPES; i++) {                                                                                                      
                        read(fds[i][0], buffer, 100);                                                                                                      
                        printf("Received value from pipe %d: %s", i, buffer);                                                                              
                }                                                                                                                                          
        } else { // Error handling                                                                                                                         
                perror("fork");                                                                                                                            
                return 1;                                                                                                                                  
        }                                                                                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat p6.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <unistd.h>                                                                                                                                        
#include <stdlib.h>                                                                                                                                        
int main() {                                                                                                                                               
        int pipe_fd[2];                                                                                                                                    
        pipe(pipe_fd);                                                                                                                                     
        pid_t pid = fork();                                                                                                                                
        if (pid == 0) { // Child process                                                                                                                   
                close(pipe_fd[0]); // Close read end                                                                                                       
                dup2(pipe_fd[1], STDOUT_FILENO); // Redirect stdout to pipe                                                                                
                close(pipe_fd[1]); // Close write end                                                                                                      
                execl("/bin/ls", "ls", NULL); // Execute ls command                                                                                        
                perror("execl");                                                                                                                           
                exit(EXIT_FAILURE);                                                                                                                        
        } else { // Parent process                                                                                                                         
                close(pipe_fd[1]); // Close write end                                                                                                      
                dup2(pipe_fd[0], STDIN_FILENO); // Redirect stdin to pipe                                                                                  
                close(pipe_fd[0]); // Close read end                                                                                                       
                execl("/usr/bin/wc", "wc", "-l", NULL); // Execute wc -l command                                                                           
                perror("execl");                                                                                                                           
                exit(EXIT_FAILURE);                                                                                                                        
        }                                                                                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat p7.c                                                                                              
#include <stdio.h>                                                                                                                                         

#include <stdlib.h>                                                                                                                                        

#include <unistd.h>                                                                                                                                        

#include <sys/wait.h>                                                                                                                                      

#define NUM_COMMANDS 3                                                                                                                                     

int main() {                                                                                                                                               

        int child_pipes[NUM_COMMANDS][2]; // Pipes for communication with childre// Create pipes                                                           

        for (int i = 0; i < NUM_COMMANDS; ++i) {                                                                                                           

                if (pipe(child_pipes[i]) == -1) {                                                                                                          

                        perror("pipe");                                                                                                                    

                        exit(EXIT_FAILURE);                                                                                                                
                }                                                                                                                                          

        }// Fork child processes                                                                                                                           

        for (int i = 0; i < NUM_COMMANDS; ++i) {                                                                                                           

                pid_t pid = fork();                                                                                                                        

                if (pid == -1) {                                                                                                                           

                        perror("fork");                                                                                                                    

                        exit(EXIT_FAILURE);                                                                                                                

                } else if (pid == 0) { // Child process // Close read end in child                                                                         

                        close(child_pipes[i][0]);// Redirect stdout to the write end of the pipe                                                           

                        dup2(child_pipes[i][1], STDOUT_FILENO);// Execute a command based on the child index                                               

                        switch (i) {                                                                                                                       

                                case 0:                                                                                                                    

                                        execlp("ls", "ls", "-l", NULL);                                                                                    

                                        break;                                                                                                             

                                case 1:                                                                                                                    

                                        execlp("pwd", "pwd", NULL);                                                                                        

                                        break;                                                                                                             

                                case 2:                                                                                                                    

                                        execlp("date", "date", NULL);                                                                                      

                                        break;                                                                                                             

                                default:                                                                                                                   

                                        fprintf(stderr, "Unknown command index\n");                                                                        

                                        exit(EXIT_FAILURE);                                                                                                

                        }                                                                                                                                  

                }                                                                                                                                          

        } // Parent process                                                                                                                                

        for (int i = 0; i < NUM_COMMANDS; ++i) {// Close write end in parent                                                                               

                close(child_pipes[i][1]);// Read the output from the child                                                                                 

                char buffer[1024];                                                                                                                         

                ssize_t bytes_read;                                                                                                                        

                printf("Output from child %d:\n", i + 1);                                                                                                  

                while ((bytes_read = read(child_pipes[i][0], buffer, sizeof(buffer))) != 0) {                                                              

                        if (bytes_read == -1) {                                                                                                            

                                perror("read");                                                                                                            

                                exit(EXIT_FAILURE);                                                                                                        

                        }                                                                                                                                  

                        write(STDOUT_FILENO, buffer, bytes_read);                                                                                          

                }// Close read end in parent                                                                                                               

                close(child_pipes[i][0]);                                                                                                                  
        }                                                                                                                                                  
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat p8.c                                                                                              
cat: p8.c: No such file or directory                                                                                                                       
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ ls                                                                                                    
ex1  ex2  ex3  ex4  ex5  ex6  ex7  fifo  p1.c  p2.c  p3.c  p4.c  p5.c  p6.c  p7.c  sp1  sp1.c  sp2  sp2.c
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat sp1.c                                                                                             
#include<stdio.h>                                                                                                                                          

#include<stdlib.h>                                                                                                                                         

#include<unistd.h>                                                                                                                                         

void fibo(int n)                                                                                                                                           

{                                                                                                                                                          

        int prev=0,curr=1,next;                                                                                                                            

        printf("Fibonacci upto %d is:",n);                                                                                                                 

        printf("%d, ",prev);                                                                                                                               

        while(curr<=n){                                                                                                                                    

                printf("%d, ",curr);                                                                                                                       

                next=prev+curr;                                                                                                                            

                prev=curr;                                                                                                                                 

                curr=next;                                                                                                                                 

        }                                                                                                                                                  

        printf("\n");                                                                                                                                      

}                                                                                                                                                          

int main(){                                                                                                                                                

        int n,pipefd[2];                                                                                                                                   

        pid_t pid;                                                                                                                                         

        if(pipe(pipefd)==-1){                                                                                                                              

                perror("PIPE");                                                                                                                            

                exit(EXIT_FAILURE);                                                                                                                        

        }                                                                                                                                                  

        pid=fork();                                                                                                                                        

        if(pid==-1){                                                                                                                                       

                perror("FORK");                                                                                                                            

                exit(EXIT_FAILURE);                                                                                                                        

        }                                                                                                                                                  

        if(pid==0)                                                                                                                                         
        {                                                                                                                                                  

                close(pipefd[1]);                                                                                                                          

                read(pipefd[0],&n,sizeof(n));                                                                                                              

                close(pipefd[0]);                                                                                                                          

                fibo(n);                                                                                                                                   

        }                                                                                                                                                  

        else{                                                                                                                                              

                close(pipefd[0]);                                                                                                                          

                printf("Enter the value of n:");                                                                                                           

                scanf("%d",&n);                                                                                                                            

                write(pipefd[1], &n,sizeof(n));                                                                                                            

                close(pipefd[1]);                                                                                                                          

        }                                                                                                                                                  

        return 0;                                                                                                                                          

}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cat sp2.c                                                                                             
#include<stdio.h>                                                                                                                                          

#include<stdlib.h>                                                                                                                                         

struct TreeNode{                                                                                                                                           

        int val;                                                                                                                                           

        struct TreeNode *left;                                                                                                                             

        struct TreeNode *right;                                                                                                                            

};                                                                                                                                                         

struct TreeNode* newNode(int value){                                                                                                                       

        struct TreeNode* node=(struct TreeNode*)malloc(sizeof(struct TreeNode));                                                                           

        node->val = value;                                                                                                                                 

        node->right = NULL;                                                                                                                                

        node->left = NULL;                                                                                                                                 

        return node;                                                                                                                                       

}                                                                                                                                                          

int count;                                                                                                                                                 

int countTriplets(struct TreeNode* root){                                                                                                                  

        if(root == NULL){                                                                                                                                  

                return 0;                                                                                                                                  

        }                                                                                                                                                  

        if(root->right != NULL && root->left->left !=NULL && root->right->right != NULL){                                                                  

                int s1, s2, s3, s4;                                                                                                                        

                s1 = root->val + root->left->val + root->left->left->val;                                                                                  

                s2 = root->val + root->left->val + root->left->right->val;                                                                                 

                s3 = root->val + root->right->val + root->right->left->val;                                                                                

                s4 = root->val + root->right->val + root->right->right->val;                                                                               

                if(s1 > 7){                                                                                                                                

                        count += 1;                                                                                                                        

                }                                                                                                                                          

                if(s2 > 7){                                                                                                                                
                        count += 1;                                                                                                                        

                }                                                                                                                                          

                if(s3 > 7){                                                                                                                                

                        count += 1;                                                                                                                        

                }                                                                                                                                          

                if(s4 > 7){                                                                                                                                

                        count += 1;                                                                                                                        

                }                                                                                                                                          

        }                                                                                                                                                  

        countTriplets(root->left);                                                                                                                         

        countTriplets(root->right);                                                                                                                        

        return count;                                                                                                                                      

}                                                                                                                                                          

int main(){                                                                                                                                                

        struct TreeNode *root = newNode(1);                                                                                                                

        root->left = newNode(2);                                                                                                                           

        root->right = newNode(3);                                                                                                                          

        root->left->left = newNode(4);                                                                                                                     

        root->left->right = newNode(5);                                                                                                                    

        root->right->left = newNode(6);                                                                                                                    

        root->right->right = newNode(7);                                                                                                                   

        int tripletsCount = countTriplets(root);                                                                                                           

        printf("Number of triplets with sum greater than 7 : %d\n", tripletsCount);                                                                        

        return 0;                                                                                                                                          

}                                                                                   

































                                                                       
Week 8

[s2022103042@centos8-linux Wed May 15 05:54 PM wk7]$ cd ..                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:55 PM os]$ cd wk8                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ ls                                                                                                    
a1.c  a2.c  a3.c  a4.c  a5.c  a6.c  a.out  ex1  ex2  ex3  ex4  ex5  ex6  s3  s3.c  s4  s4.c  sp1  sp1.c  sp2  sp2a  sp2a.c  sp2.c
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat a1.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <string.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#define SHM_SIZE 1024                                                                                                                                      
int main() {                                                                                                                                               
        key_t key = ftok("shmfile", 65);                                                                                                                   
        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 
        char *str = (char*) shmat(shmid, (void*)0, 0);                                                                                                     
        printf("Enter data to write to shared memory: ");                                                                                                  
        fgets(str, SHM_SIZE, stdin);                                                                                                                       
        printf("Data written to shared memory: %s\n", str);                                                                                                
        shmdt(str);                                                                                                                                        
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat a2.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#define SHM_SIZE 1024                                                                                                                                      
int main() {                                                                                                                                               
        key_t key = ftok("shmfile",65);                                                                                                                    
        int shmid = shmget(key,SHM_SIZE,0666|IPC_CREAT);                                                                                                   
        char *str = (char*) shmat(shmid,(void*)0,0);                                                                                                       
        printf("Data read from shared memory: %s\n",str);                                                                                                  
        shmdt(str);                                                                                                                                        
        shmctl(shmid,IPC_RMID,NULL);                                                                                                                       
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat a3.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#include <unistd.h>                                                                                                                                        
#include <sys/wait.h>                                                                                                                                      
#define SHM_SIZE sizeof(int) * 2                                                                                                                           
int main() {                                                                                                                                               
        key_t key = ftok("shmfile", 65);                                                                                                                   
        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 
        int *data = (int*) shmat(shmid, (void*)0, 0);                                                                                                      
        data[0] = 0; // Initialize counter                                                                                                                 
        printf("Initial counter value: %d\n", data[0]);                                                                                                    
        int num_processes = 3; // Number of child processes                                                                                                
        for (int i = 0; i < num_processes; i++) {                                                                                                          
                pid_t pid = fork();                                                                                                                        
                if (pid < 0) {                                                                                                                             
                        perror("Fork failed");                                                                                                             
                        exit(EXIT_FAILURE);                                                                                                                
                } else if (pid == 0) { // Child process                                                                                                    
                        data[0]++; // Increment counter                                                                                                    
                        data[data[0]] = getpid(); // Write PID to shared memory                                                                            
                        printf("Child process %d wrote its PID to shared memory\n", getpid());                                                             
                        shmdt(data);                                                                                                                       
                        exit(EXIT_SUCCESS);                                                                                                                
                }                                                                                                                                          
        }// Parent process waits for all child processes to finish                                                                                         
        for (int i = 0; i < num_processes; i++) {                                                                                                          
                wait(NULL);                                                                                                                                
        }                                                                                                                                                  
        printf("PIDs written to shared memory:\n");                                                                                                        
        printf("Final counter value: %d\n", data[0]);                                                                                                      
        for (int i = 1; i <= data[0]; i++) {                                                                                                               
                printf("%d\n", data[i]);                                                                                                                   
        }                                                                                                                                                  
        shmdt(data);                                                                                                                                       
        shmctl(shmid, IPC_RMID, NULL); // Remove shared memory segment after use                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat a4.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#include <unistd.h>                                                                                                                                        
#include <sys/wait.h>                                                                                                                                      
#define SHM_SIZE sizeof(int)                                                                                                                               
void perform_calculation(int shmid) {                                                                                                                      
        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    
        int num1 ;                                                                                                                                         
        int num2 ;                                                                                                                                         
        printf("Enter two numbers(for addition) : ");                                                                                                      
        scanf("%d %d",&num1,&num2);                                                                                                                        
        *result = num1 + num2;                                                                                                                             
        shmdt(result);                                                                                                                                     
}                                                                                                                                                          
void read_result_from_shared_memory(int shmid) {                                                                                                           
        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    
        printf("Result read from shared memory: %d\n", *result);                                                                                           
        shmdt(result);                                                                                                                                     
}                                                                                                                                                          
int main() {                                                                                                                                               
        key_t key = ftok("shmfile", 65);                                                                                                                   
        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 
        int choice = 0;                                                                                                                                    
        while (choice != 3) {                                                                                                                              
                printf("\n1. Perform calculation\n");                                                                                                      
                printf("2. Read result from shared memory\n");                                                                                             
                printf("3. Exit\n");                                                                                                                       
                printf("Enter your choice: ");                                                                                                             
                scanf("%d", &choice);                                                                                                                      
                switch (choice) {                                                                                                                          
                        case 1:                                                                                                                            
                                perform_calculation(shmid);                                                                                                
                                printf("Calculation performed and result stored in shared memory.\n");                                                     
                                break;                                                                                                                     
                        case 2:                                                                                                                            
                                read_result_from_shared_memory(shmid);                                                                                     
                                break;                                                                                                                     
                        case 3:                                                                                                                            
                                printf("Exiting...\n");                                                                                                    
                                break;                                                                                                                     
                        default:                                                                                                                           
                                printf("Invalid choice.\n");                                                                                               
                                break;                                                                                                                     
                }                                                                                                                                          
        }                                                                                                                                                  
        shmctl(shmid, IPC_RMID, NULL); // Remove shared memory segment after use                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat a5.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <string.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#define SHM_SIZE 1024                                                                                                                                      
int main() {                                                                                                                                               
        key_t key = ftok("shmfile", 65);                                                                                                                   
        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 
        char *str = (char*) shmat(shmid, (void*)0, 0);                                                                                                     
        printf("Enter a string to reverse: ");                                                                                                             
        fgets(str, SHM_SIZE, stdin);                                                                                                                       
        int len = strlen(str) - 1;                                                                                                                         
        for (int i = 0; i < len / 2; i++) {                                                                                                                
                char temp = str[i];                                                                                                                        
                str[i] = str[len - i - 1];                                                                                                                 
                str[len - i - 1] = temp;                                                                                                                   
        }                                                                                                                                                  
        printf("Reversed string stored in shared memory: %s\n", str);                                                                                      
        shmdt(str);                                                                                                                                        
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat a6.c                                                                                              
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#define N 3                                                                                                                                                
#define SHM_SIZE sizeof(int) * N * N * 3                                                                                                                   
void write_matrices_to_shared_memory(int shmid) {                                                                                                          
        int *matrices = (int*) shmat(shmid, (void*)0, 0);                                                                                                  
        printf("Enter elements of matrix A (%dx%d):\n", N, N);                                                                                             
        for (int i = 0; i < N; i++) {                                                                                                                      
                for (int j = 0; j < N; j++) {                                                                                                              
                        printf("A[%d][%d]: ", i, j);                                                                                                       
                        scanf("%d", &matrices[i * N + j]);                                                                                                 
                }                                                                                                                                          
        }                                                                                                                                                  
        printf("Enter elements of matrix B (%dx%d):\n", N, N);                                                                                             
        for (int i = 0; i < N; i++) {                                                                                                                      
                for (int j = 0; j < N; j++) {                                                                                                              
                        printf("B[%d][%d]: ", i, j);                                                                                                       
                        scanf("%d", &matrices[N * N + i * N + j]);                                                                                         
                }                                                                                                                                          
        }                                                                                                                                                  
        shmdt(matrices);                                                                                                                                   
}                                                                                                                                                          
void read_result_from_shared_memory(int shmid) {                                                                                                           
        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    
        printf("Matrix multiplication result read from shared memory:\n");                                                                                 
        for (int i = 0; i < N; i++) {                                                                                                                      
                for (int j = 0; j < N; j++) {                                                                                                              
                        printf("%d\t", result[2*N*N+i * N + j]);                                                                                           
                }                                                                                                                                          
                printf("\n");                                                                                                                              
        }                                                                                                                                                  
        shmdt(result);                                                                                                                                     
}                                                                                                                                                          
void multiply_matrices(int shmid) {                                                                                                                        
        int *matrices = (int*) shmat(shmid, (void*)0, 0);                                                                                                  
        int A[N][N], B[N][N], result[N][N];                                                                                                                
        for (int i = 0; i < N; i++) {                                                                                                                      
                for (int j = 0; j < N; j++) {                                                                                                              
                        A[i][j] = matrices[i * N + j];                                                                                                     
                        B[i][j] = matrices[N * N + i * N + j];                                                                                             
                }                                                                                                                                          
        }                                                                                                                                                  
        for (int i = 0; i < N; i++) {                                                                                                                      
                for (int j = 0; j < N; j++) {                                                                                                              
                        result[i][j] = 0;                                                                                                                  
                        for (int k = 0; k < N; k++) {                                                                                                      
                                result[i][j] += A[i][k] * B[k][j];                                                                                         
                        }                                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
        for (int i = 0; i < N; i++) {                                                                                                                      
                for (int j = 0; j < N; j++) {                                                                                                              
                        matrices[2 * N * N + i * N + j] = result[i][j];                                                                                    
                }                                                                                                                                          
        }                                                                                                                                                  
        shmdt(matrices);                                                                                                                                   
}                                                                                                                                                          
int main() {                                                                                                                                               
        key_t key = ftok("shmfile", 65);                                                                                                                   
        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 
        int choice = 0;                                                                                                                                    
        while (choice != 4) {                                                                                                                              
                printf("\n1. Write matrices to shared memory\n");                                                                                          
                printf("2. Read result from shared memory\n");                                                                                             
                printf("3. Multiply matrics.\n");                                                                                                          
                printf("4. Exit\n");                                                                                                                       
                printf("Enter your choice: ");                                                                                                             
                scanf("%d", &choice);                                                                                                                      
                switch (choice) {                                                                                                                          
                        case 1:                                                                                                                            
                                write_matrices_to_shared_memory(shmid);                                                                                    
                                printf("Matrices written to shared memory.\n");                                                                            
                                break;                                                                                                                     
                        case 2:                                                                                                                            
                                read_result_from_shared_memory(shmid);                                                                                     
                                break;                                                                                                                     
                        case 3:                                                                                                                            
                                multiply_matrices(shmid);                                                                                                  
                                printf("Matrics multiplied.\n");                                                                                           
                                break;                                                                                                                     
                        case 4:                                                                                                                            
                                printf("Exiting...\n");                                                                                                    
                                break;                                                                                                                     
                        default:                                                                                                                           
                                printf("Invalid choice.\n");                                                                                               
                                break;                                                                                                                     
                }                                                                                                                           
        }                                                                                                                                                  
        shmctl(shmid, IPC_RMID, NULL); // Remove shared memory segment after use                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat sp1.c                                                                                             
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#include <unistd.h>                                                                                                                                        
#include <sys/wait.h>                                                                                                                                      
#define SHM_SIZE sizeof(int)                                                                                                                               
void perform_calculation(int shmid) {                                                                                                                      
        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    
        int num1 ;                                                                                                                                         
        printf("Enter a numbers: ");                                                                                                                       
        scanf("%d",&num1);                                                                                                                                 
        *result = num1;                                                                                                                                    
        shmdt(result);                                                                                                                                     
}                                                                                                                                                          
void read_result_from_shared_memory(int shmid) {                                                                                                           
        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    
        for(int i=1;i<=10;i++){                                                                                                                            
        printf("%dX%d=%d\n",i,*result,i*(*result));                                                                                                        
        }                                                                                                                                                  
        shmdt(result);                                                                                                                                     
}                                                                                                                                                          
int main() {                                                                                                                                               
        key_t key = ftok("shmfile", 65);                                                                                                                   
        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 
        int choice = 0;                                                                                                                                    
        while (choice != 3) {                                                                                                                              
                printf("\n1. Perform calculation\n");                                                                                                      
                printf("2. Read result from shared memory\n");                                                                                             
                printf("3. Exit\n");                                                                                                                       
                printf("Enter your choice: ");                                                                                                             
                scanf("%d", &choice);                                                                                                                      
                switch (choice) {                                                                                                                          
                        case 1:                                                                                                                            
                                perform_calculation(shmid);                                                                                                
                                printf("value stored in shared memory.\n");                                                                                
                                break;                                                                                                                     
                        case 2:                                                                                                                            
                                read_result_from_shared_memory(shmid);                                                                                     
                                break;                                                                                                                     
                        case 3:                                                                                                                            
                                printf("Exiting...\n");                                                                                                    
                                break;                                                                                                                     
                        default:                                                                                                                           
                                printf("Invalid choice.\n");                                                                                               
                                break;                                                                                                                     
                }                                                                                                                                          
        }                                                                                                                                                  
        shmctl(shmid, IPC_RMID, NULL); // Remove shared memory segment after use                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat sp2.c                                                                                             
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <string.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#define SHM_SIZE 1024                                                                                                                                      
int main() {                                                                                                                                               
        key_t key1 = ftok("shmfile", 65);                                                                                                                  
        int shmid1 = shmget(key1, SHM_SIZE, 0666|IPC_CREAT);                                                                                               
        char *str1 = (char*) shmat(shmid1, (void*)0, 0);                                                                                                   
        printf("Enter data to write to shared memory: ");                                                                                                  
        fgets(str1, SHM_SIZE, stdin);                                                                                                                      
        printf("Data written to shared memory: %s\n", str1);                                                                                               
        shmdt(str1);                                                                                                                                       
        key_t key2 = ftok("shmfile", 95);                                                                                                                  
        int shmid2 = shmget(key2, SHM_SIZE, 0666|IPC_CREAT);                                                                                               
        char *str2 = (char*) shmat(shmid2, (void*)0, 0);                                                                                                   
        printf("Enter data to write to shared memory: ");                                                                                                  
        fgets(str2, SHM_SIZE, stdin);                                                                                                                      
        printf("Data written to shared memory: %s\n", str2);                                                                                               
        shmdt(str2);                                                                                                                                       
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat sp2a.c                                                                                            
#include <stdio.h>                                                                                                                                         
#include<string.h>                                                                                                                                         
#include <stdlib.h>                                                                                                                                        
#include <sys/ipc.h>                                                                                                                                       
#include <sys/shm.h>                                                                                                                                       
#define SHM_SIZE 1024                                                                                                                                      
int main() {                                                                                                                                               
        key_t key1 = ftok("shmfile",65);                                                                                                                   
        int shmid1 = shmget(key1,SHM_SIZE,0666|IPC_CREAT);                                                                                                 
        char *str1 = (char*) shmat(shmid1,(void*)0,0);                                                                                                     
        printf("Data read from shared memory: %s\n",str1);                                                                                                 
        printf("length of string 1 is %d\n",strlen(str1));                                                                                                 
        shmdt(str1);                                                                                                                                       
        shmctl(shmid1,IPC_RMID,NULL);                                                                                                                      
        key_t key2 = ftok("shmfile",95);                                                                                                                   
        int shmid2 = shmget(key2,SHM_SIZE,0666|IPC_CREAT);                                                                                                 
        char *str2 = (char*) shmat(shmid2,(void*)0,0);                                                                                                     
        printf("Data read from shared memory: %s\n",str2);                                                                                                 
        printf("length of string 2 is %d\n",strlen(str2));                                                                                                 
        shmdt(str2);                                                                                                                                       
        shmctl(shmid2,IPC_RMID,NULL);                                                                                                                      
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:55 PM wk8]$ cat s3.c                                                                                              
#include <stdio.h>                                                                                                                                         

#include <stdlib.h>                                                                                                                                        

#include <sys/ipc.h>                                                                                                                                       

#include <sys/shm.h>                                                                                                                                       

#include <unistd.h>                                                                                                                                        

#include <sys/wait.h>                                                                                                                                      

#define SHM_SIZE sizeof(int)                                                                                                                               

void perform_calculation(int shmid) {                                                                                                                      

        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    

        int num1 ;                                                                                                                                         

        printf("Enter a mark : ");                                                                                                                         

        scanf("%d",&num1);                                                                                                                                 

        *result = num1;                                                                                                                                    

        shmdt(result);                                                                                                                                     

}                                                                                                                                                          

void read_result_from_shared_memory(int shmid) {                                                                                                           

        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    

        printf("Result read from shared memory:");                                                                                                         

        if((*result)>90)                                                                                                                                   

                printf("O grade");                                                                                                                         

        else if((*result)>75)                                                                                                                              

                printf("A grade");                                                                                                                         

        else if ((*result)>50)                                                                                                                             

                printf("B Grade");                                                                                                                         

        else                                                                                                                                               

                printf("Fail");                                                                                                                            

        shmdt(result);                                                                                                                                     

}                                                                                                                                                          

int main() {                                                                                                                                               
        key_t key = ftok("shmfile", 65);                                                                                                                   

        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 

        int choice = 0;                                                                                                                                    

        while (choice != 3) {                                                                                                                              

                printf("\n1.MARK ENTRY\n");                                                                                                                

                printf("2. Read grade result from shared memory\n");                                                                                       

                printf("3. Exit\n");                                                                                                                       

                printf("Enter your choice: ");                                                                                                             

                scanf("%d", &choice);                                                                                                                      

                switch (choice) {                                                                                                                          

                        case 1:                                                                                                                            

                                perform_calculation(shmid);                                                                                                

                                printf("Mark stored in shared memory.\n");                                                                                 

                                break;                                                                                                                     

                        case 2:                                                                                                                            

                                read_result_from_shared_memory(shmid);                                                                                     

                                break;                                                                                                                     

                        case 3:                                                                                                                            

                                printf("Exiting...\n");                                                                                                    

                                break;                                                                                                                     

                        default:                                                                                                                           

                                printf("Invalid choice.\n");                                                                                               

                                break;                                                                                                                     

                }               }                                                                                                                          

}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:56 PM wk8]$ cat s4.c                                                                                              
#include <stdio.h>                                                                                                                                         

#include <stdlib.h>                                                                                                                                        

#include <sys/ipc.h>                                                                                                                                       

#include <sys/shm.h>                                                                                                                                       

#include <unistd.h>                                                                                                                                        

#include <sys/wait.h>                                                                                                                                      

#define SHM_SIZE sizeof(int)                                                                                                                               

void perform_calculation(int shmid) {                                                                                                                      

        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    

        int num1,num2,num3 ;                                                                                                                               

        printf("Enter a numbers(for pattern) : ");                                                                                                         

        scanf("%d %d %d",&num1,&num2,&num3);                                                                                                               

        *result = num3*100+num2*10+num1;                                                                                                                   

        shmdt(result);                                                                                                                                     

}                                                                                                                                                          

void read_result_from_shared_memory(int shmid) {                                                                                                           

        int *result = (int*) shmat(shmid, (void*)0, 0);                                                                                                    

        printf("Result read from shared memory:");                                                                                                         

        printf("\n");                                                                                                                                      

        for(int i=1;i<=((*result)%10);i++)                                                                                                                 

                printf("\tx");                                                                                                                             

        printf("\n");                                                                                                                                      

        for (int i=1;i<=((*result)/10)%10;i++)                                                                                                             

                printf("\ty");                                                                                                                             

        printf("\n");                                                                                                                                      

        for (int i=1;i<=(*result)/100;i++)                                                                                                                 

                printf("\tz");                                                                                                                             

        shmdt(result);                                                                                                                                     

}                                                                                                                                                          
int main() {                                                                                                                                               

        key_t key = ftok("shmfile", 65);                                                                                                                   

        int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);                                                                                                 

        int choice = 0;                                                                                                                                    

        while (choice != 3) {                                                                                                                              

                printf("\n1. pattern heading\n");                                                                                                          

                printf("2. Read result from shared memory\n");                                                                                             

                printf("3. Exit\n");                                                                                                                       

                printf("Enter your choice: ");                                                                                                             

                scanf("%d", &choice);                                                                                                                      

                switch (choice) {                                                                                                                          

                        case 1:                                                                                                                            

                                perform_calculation(shmid);                                                                                                

                                printf("Result stored in shared memory.\n");                                                                               

                                break;                                                                                                                     

                        case 2:                                                                                                                            

                                read_result_from_shared_memory(shmid);                                                                                     

                                break;                                                                                                                     

                        case 3:                                                                                                                            

                                printf("Exiting...\n");                                                                                                    

                                break;                                                                                                                     

                        default:                                                                                                                           

                                printf("Invalid choice.\n");                                                                                               

                                break;                                                                                                                     

                }               }                                                                                                                          

}                                                                                            







Week 9

[s2022103042@centos8-linux Wed May 15 05:56 PM wk8]$ cd ..                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:56 PM os]$ cd wk9                                                                                                 
[s2022103042@centos8-linux Wed May 15 05:56 PM wk9]$ ls                                                                                                    
a.out  fcfs  fcfs.c  prio  prio.c  rr  rr1.c  rr.c  sjf  sjf1.c  sjf.c  sp1  sp1.c  sp2  sp2.c  srtf  srtf.c
[s2022103042@centos8-linux Wed May 15 05:56 PM wk9]$ cat fcfs.c                                                                                            
#include <stdio.h>                                                                                                                                         
void swap(int *a, int *b) {                                                                                                                                
        int temp = *a;                                                                                                                                     
        *a = *b;                                                                                                                                           
        *b = temp;                                                                                                                                         
}                                                                                                                                                          
void bubbleSort(int pid[], int bt[], int n) {                                                                                                              
        int i, j;                                                                                                                                          
        for (i = 0; i < n-1; i++) {                                                                                                                        
                for (j = 0; j < n-i-1; j++) {                                                                                                              
                        if (pid[j] > pid[j+1]) {                                                                                                           
                                swap(&pid[j], &pid[j+1]);                                                                                                  
                                swap(&bt[j], &bt[j+1]);                                                                                                    
                        }                                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
}                                                                                                                                                          
int main() {                                                                                                                                               
        int pid[15];                                                                                                                                       
        int bt[15];                                                                                                                                        
        int n;                                                                                                                                             
        printf("Enter the number of processes: ");                                                                                                         
        scanf("%d", &n);                                                                                                                                   
        printf("Enter arrival time of all the processes: ");                                                                                               
        for(int i = 0; i < n; i++) {                                                                                                                       
                scanf("%d", &pid[i]);                                                                                                                      
        }                                                                                                                                                  
        printf("Enter burst time of all the processes: ");                                                                                                 
        for(int i = 0; i < n; i++) {                                                                                                                       
                scanf("%d", &bt[i]);                                                                                                                       
        }                                                                                                                                                  
        bubbleSort(pid, bt, n);                                                                                                                            
        int i, wt[n];                                                                                                                                      
        wt[0] = 0;                                                                                                                                         
        for(i = 1; i < n; i++) {                                                                                                                           
                wt[i] = bt[i - 1] + wt[i - 1];                                                                                                             
        }                                                                                                                                                  
        printf("Arrival Time     Burst Time     Waiting Time     Turnaround Time\n");                                                                      
        float twt = 0.0;                                                                                                                                   
        float tat = 0.0;                                                                                                                                   
        for(i = 0; i < n; i++) {                                                                                                                           
                printf("%d\t\t", pid[i]);                                                                                                                  
                printf("%d\t\t", bt[i]);                                                                                                                   
                printf("%d\t\t", wt[i]);                                                                                                                   
                printf("%d\t\t", bt[i] + wt[i]);                                                                                                           
                printf("\n");                                                                                                                              
                twt += wt[i];                                                                                                                              
                tat += (wt[i] + bt[i]);                                                                                                                    
        }                                                                                                                                                  
        float att, awt;                                                                                                                                    
        awt = twt / n;                                                                                                                                     
        att = tat / n;                                                                                                                                     
        printf("Avg. waiting time= %f\n", awt);                                                                                                            
        printf("Avg. turnaround time= %f", att);                                                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:56 PM wk9]$ cat sjf.c                                                                                             
#include<stdio.h>                                                                                                                                          
int main()                                                                                                                                                 
{                                                                                                                                                          
        int i,n,p[10]={1,2,3,4,5,6,7,8,9,10},min,k=1,btime=0;                                                                                              
        int bt[10],temp,j,at[10],wt[10],tt[10],ta=0,sum=0;                                                                                                 
        float wavg=0,tavg=0,tsum=0,wsum=0;                                                                                                                 
        printf(" -------Shortest Job First Scheduling ( NP )-------\n");                                                                                   
        printf("\nEnter the No. of processes :");                                                                                                          
        scanf("%d",&n);                                                                                                                                    
        for(i=0;i<n;i++)                                                                                                                                   
        {                                                                                                                                                  
                printf("\tEnter the burst time of %d process :",i+1);                                                                                      
                scanf(" %d",&bt[i]);                                                                                                                       
                printf("\tEnter the arrival time of %d process :",i+1);                                                                                    
                scanf(" %d",&at[i]);                                                                                                                       
        }                                                                                                                                                  
        for(i=0;i<n;i++)                                                                                                                                   
        {                                                                                                                                                  
                for(j=0;j<n;j++)                                                                                                                           
                {                                                                                                                                          
                        if(at[i]<at[j])                                                                                                                    
                        {                                                                                                                                  
                                temp=p[j];                                                                                                                 
                                p[j]=p[i];                                                                                                                 
                                p[i]=temp;                                                                                                                 
                                temp=at[j];                                                                                                                
                                at[j]=at[i];                                                                                                               
                                at[i]=temp;                                                                                                                
                                temp=bt[j];                                                                                                                
                                bt[j]=bt[i];                                                                                                               
                                bt[i]=temp;                                                                                                                
                        }                                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
        for(j=0;j<n;j++)                                                                                                                                   
        {                                                                                                                                                  
                btime=btime+bt[j];                                                                                                                         
                min=bt[k];                                                                                                                                 
                for(i=k;i<n;i++)                                                                                                                           
                {                                                                                                                                          
                        if (btime>=at[i] && bt[i]<min)                                                                                                     
                        {                                                                                                                                  
                                temp=p[k];                                                                                                                 
                                p[k]=p[i];                                                                                                                 
                                p[i]=temp;                                                                                                                 
                                temp=at[k];                                                                                                                
                                at[k]=at[i];                                                                                                               
                                at[i]=temp;                                                                                                                
                                temp=bt[k];                                                                                                                
                                bt[k]=bt[i];                                                                                                               
                                bt[i]=temp;                                                                                                                
                        }                                                                                                                                  
                }                                                                                                                                          
                k++;                                                                                                                                       
        }                                                                                                                                                  
        wt[0]=0;                                                                                                                                           
        sum=at[0];                                                                                                                                         
        for(i=1;i<n;i++)                                                                                                                                   
        {                                                                                                                                                  
                sum=sum+bt[i-1];
                wt[i]=sum-at[i];                                                                                                                           
                wsum=wsum+wt[i];                                                                                                                           
        }                                                                                                                                                  
        wavg=(wsum/n);                                                                                                                                     
        for(i=0;i<n;i++)                                                                                                                                   
        {                                                                                                                                                  
                ta=ta+bt[i];                                                                                                                               
                tt[i]=ta-at[i];                                                                                                                            
                tsum=tsum+tt[i];                                                                                                                           
        }                                                                                                                                                  
        tavg=(tsum/n);                                                                                                                                     
        printf("");                                                                                                                                        
        printf("\n RESULT:-");                                                                                                                             
        printf("\nProcess\t Burst\t Arrival\t Waiting\t Turn-around" );                                                                                    
        for(i=0;i<n;i++)                                                                                                                                   
        {                                                                                                                                                  
                printf("\n p%d\t %d\t %d\t\t %d\t\t\t%d",p[i],bt[i],at[i],wt[i],tt[i]);                                                                    
        }                                                                                                                                                  
        printf("\n\nAVERAGE WAITING TIME : %f",wavg);                                                                                                      
        printf("\nAVERAGE TURN AROUND TIME : %f",tavg);                                                                                                    
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:56 PM wk9]$ cat srtf.c                                                                                            
#include <stdio.h>                                                                                                                                         

struct process {                                                                                                                                           

        int pid;                                                                                                                                           

        int at;                                                                                                                                            

        int bt;                                                                                                                                            

        int st;                                                                                                                                            

        int ct;                                                                                                                                            

        int tat;                                                                                                                                           

        int wt;                                                                                                                                            

        int rt;                                                                                                                                            

};                                                                                                                                                         

int main() {                                                                                                                                               

        int x;                                                                                                                                             

        struct process p[100];                                                                                                                             

        float avg_tat;                                                                                                                                     

        float avg_wt;                                                                                                                                      

        int total_tat = 0;                                                                                                                                 

        int total_wt = 0;                                                                                                                                  

        int burst_remaining[100] = {0};                                                                                                                    

        int is_completed[100] = {0};                                                                                                                       

        printf("Enter the number of processes: ");                                                                                                         

        scanf("%d", &x);                                                                                                                                   

        for (int i = 0; i < x; i++) {                                                                                                                      

                printf("Enter arrival time of process %d: ", i + 1);                                                                                       

                scanf("%d", &p[i].at);                                                                                                                     

                printf("Enter burst time of process %d: ", i + 1);                                                                                         

                scanf("%d", &p[i].bt);                                                                                                                     

                p[i].pid = i + 1;                                                                                                                          

                burst_remaining[i] = p[i].bt;                                                                                                              
        }                                                                                                                                                  

        int current_time = 0;                                                                                                                              

        int completed = 0;                                                                                                                                 

        int prev = 0;                                                                                                                                      

        while (completed != x) {                                                                                                                           

                int idx = -1;                                                                                                                              

                int mn = 10000000;                                                                                                                         

                for (int i = 0; i < x; i++) {                                                                                                              

                        if (p[i].at <= current_time && is_completed[i] == 0) {                                                                             

                                if (burst_remaining[i] < mn) {                                                                                             

                                        mn = burst_remaining[i];                                                                                           

                                        idx = i;                                                                                                           

                                }                                                                                                                          

                                if (burst_remaining[i] == mn) {                                                                                            

                                        if (p[i].at < p[idx].at) {                                                                                         

                                                mn = burst_remaining[i];                                                                                   

                                                idx = i;                                                                                                   

                                        }                                                                                                                  

                                }                                                                                                                          

                        }                                                                                                                                  

                }                                                                                                                                          

                if (idx != -1) {                                                                                                                           

                        if (burst_remaining[idx] == p[idx].bt) {                                                                                           

                                p[idx].st = current_time;                                                                                                  

                        }                                                                                                                                  

                        burst_remaining[idx]--;                                                                                                            

                        current_time++;                                                                                                                    
                        if (burst_remaining[idx] == 0) {                                                                                                   

                                p[idx].ct = current_time;                                                                                                  

                                p[idx].tat = p[idx].ct - p[idx].at;                                                                                        

                                p[idx].wt = p[idx].tat - p[idx].bt;                                                                                        

                                total_tat += p[idx].tat;                                                                                                   

                                total_wt += p[idx].wt;                                                                                                     

                                is_completed[idx] = 1;                                                                                                     

                                completed++;                                                                                                               

                        }                                                                                                                                  

                } else {                                                                                                                                   

                        current_time++;                                                                                                                    

                }                                                                                                                                          

        }                                                                                                                                                  

        avg_tat = (float) total_tat / x;                                                                                                                   

        avg_wt = (float) total_wt / x;                                                                                                                     

        printf("\nProcess\tTurnaround Time\tWaiting Time\n");                                                                                              

        for (int i = 0; i < x; i++) {                                                                                                                      

                printf("%d\t%d\t\t%d\n", p[i].pid, p[i].tat, p[i].wt);                                                                                     

        }                                                                                                                                                  

        printf("Average Turnaround Time: %.2f\n", avg_tat);                                                                                                

        printf("Average Waiting Time: %.2f\n", avg_wt);                                                                                                    

        return 0;                                                                                                                                          

}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:56 PM wk9]$ cat prio.c                                                                                            
#include <stdio.h>                                                                                                                                         
#include <stdlib.h>// Define a structure to represent a process                                                                                            
struct Process {                                                                                                                                           
        int id;       // Process ID                                                                                                                        
        int bt;       // Burst time                                                                                                                        
        int pr;       // Priority                                                                                                                          
        int wt;       // Waiting time                                                                                                                      
        int tat;      // Turnaround time                                                                                                                   
};// Comparator function for sorting processes based on arrival time and priority                                                                          
int compare(const void *a, const void *b) {                                                                                                                
        const struct Process *p1 = (const struct Process *)a;                                                                                              
        const struct Process *p2 = (const struct Process *)b;                                                                                              
        return p1->pr - p2->pr; // If arrival times are equal, sort by priority (descending)                                                               
}                                                                                                                                                          
int main() {                                                                                                                                               
        int n;                                                                                                                                             
        printf("Enter the number of processes: ");                                                                                                         
        scanf("%d", &n);                                                                                                                                   
        struct Process p[n];// Input process details                                                                                                       
        for (int i = 0; i < n; i++) {                                                                                                                      
                printf("Enter Process id, Burst time & Priority for Process %d: ", i + 1);                                                                 
                scanf("%d %d %d", &p[i].id, &p[i].bt, &p[i].pr);                                                                                           
        }// Sort processes based on arrival time and priority                                                                                              
        qsort(p, n, sizeof(struct Process), compare);// Calculate waiting time and turnaround time                                                         
        p[0].wt = 0;                                                                                                                                       
        p[0].tat = p[0].bt;                                                                                                                                
        int time = p[0].bt;                                                                                                                                
        double tatSum = p[0].tat;                                                                                                                          
        double wtSum = p[0].wt;                                                                                                                            
        for (int i = 1; i < n; ++i) {                                                                                                                      
                time += p[i].bt;                                                                                                                           
                p[i].tat = time;                                                                                                                           
                p[i].wt = p[i].tat - p[i].bt;                                                                                                              
                tatSum += p[i].tat;                                                                                                                        
                wtSum += p[i].wt;                                                                                                                          
        }// Sort processes by ID before printing                                                                                                           
        qsort(p, n, sizeof(struct Process), compare);                                                                                                      
        printf("\nID\tTAT\tWT\n\n");                                                                                                                       
        for (int i = 0; i < n; ++i) {                                                                                                                      
                printf("%d\t%d\t%d\n", p[i].id, p[i].tat, p[i].wt);                                                                                        
        }                                                                                                                                                  
        printf("\nAverage Waiting Time -- %.2lf", wtSum / n);                                                                                              
        printf("\nAverage Turnaround Time -- %.2lf", tatSum / n);                                                                                          
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:57 PM wk9]$ cat rr.c                                                                                              
#include <stdio.h>                                                                                                                                         
#define MAX_PROCESSES 10                                                                                                                                   
#define TIME_QUANTUM 2                                                                                                                                     
struct Process {                                                                                                                                           
        int pid;                                                                                                                                           
        int burst;                                                                                                                                         
        int remaining;                                                                                                                                     
        int arrival;                                                                                                                                       
        int waiting;                                                                                                                                       
        int turnaround;                                                                                                                                    
};                                                                                                                                                         
void calculateTimes(struct Process processes[], int n, int quantum) {                                                                                      
        int currentTime = 0;                                                                                                                               
        int remainingProcesses = n;                                                                                                                        
        while (remainingProcesses > 0) {                                                                                                                   
                for (int i = 0; i < n; i++) {                                                                                                              
                        if (processes[i].remaining > 0) {                                                                                                  
                                if (processes[i].remaining > quantum) {                                                                                    
                                        currentTime += quantum;                                                                                            

                                        processes[i].remaining -= quantum;                                                                                 

                                } else {                                                                                                                   
                                        currentTime += processes[i].remaining;                                                                             

                                        processes[i].waiting = currentTime - processes[i].arrival - processes[i].burst;                                    

                                        processes[i].turnaround = currentTime - processes[i].arrival;                                                      

                                        processes[i].remaining = 0;                                                                                        
                                        remainingProcesses--;                                                                                              

                                }                                                                                                                          
                        }                                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
}int main() {                                                                                                                                              
        int n;                                                                                                                                             
        printf("Enter the number of processes: ");                                                                                                         
        scanf("%d", &n);                                                                                                                                   
        struct Process processes[MAX_PROCESSES];                                                                                                           
        for (int i = 0; i < n; i++) {                                                                                                                      
                printf("Enter arrival time and burst time for process %d: ", i + 1);                                                                       
                scanf("%d %d", &processes[i].arrival, &processes[i].burst);                                                                                
                processes[i].pid = i + 1;                                                                                                                  
                processes[i].remaining = processes[i].burst;                                                                                               

        }                                                                                                                                                  
        calculateTimes(processes, n, TIME_QUANTUM);                                                                                                        

        printf("PID\tWaiting Time\tTurnaround Time\n");                                                                                                    
        for (int i = 0; i < n; i++) {                                                                                                                      
                printf("%d\t%d\t\t%d\n", processes[i].pid, processes[i].waiting, processes[i].turnaround);                                                 
        }                                                                                                                                                  
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:57 PM wk9]$ cat sp1.c                                                                                             
#include <stdio.h>                                                                                                                                         
#define context 1                                                                                                                                          
void swap(int *a, int *b) {                                                                                                                                
        int temp = *a;                                                                                                                                     
        *a = *b;                                                                                                                                           
        *b = temp;                                                                                                                                         
}                                                                                                                                                          
void bubbleSort(int pid[], int bt[], int n) {                                                                                                              
        int i, j;                                                                                                                                          
        for (i = 0; i < n-1; i++) {                                                                                                                        
                for (j = 0; j < n-i-1; j++) {                                                                                                              
                        if (pid[j] > pid[j+1]) {                                                                                                           
                                swap(&pid[j], &pid[j+1]);                                                                                                  
                                swap(&bt[j], &bt[j+1]);                                                                                                    
                        }                                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
}                                                                                                                                                          
int main() {                                                                                                                                               
        int pid[15];                                                                                                                                       
        int bt[15];                                                                                                                                        
        int n;                                                                                                                                             
        printf("Enter the number of processes: ");                                                                                                         
        scanf("%d", &n);                                                                                                                                   
        printf("Enter arrival time of all the processes: ");                                                                                               
        for(int i = 0; i < n; i++) {                                                                                                                       
                scanf("%d", &pid[i]);                                                                                                                      
        }                                                                                                                                                  
        printf("Enter burst time of all the processes: ");                                                                                                 
        for(int i = 0; i < n; i++) {                                                                                                                       
                scanf("%d", &bt[i]);                                                                                                                       
        }                                                                                                                                                  
        bubbleSort(pid, bt, n);                                                                                                                            
        int i, wt[n];                                                                                                                                      
        wt[0] = 0;                                                                                                                                         
        for(i = 1; i < n; i++) {                                                                                                                           
                wt[i] = bt[i - 1] + wt[i - 1]+context;                                                                                                     
        }                                                                                                                                                  
        printf("Arrival Time     Burst Time     Waiting Time     Turnaround Time\n");                                                                      
        float twt = 0.0;                                                                                                                                   
        float tat = 0.0;                                                                                                                                   
        for(i = 0; i < n; i++) {                                                                                                                           
                printf("%d\t\t", pid[i]);                                                                                                                  
                printf("%d\t\t", bt[i]);                                                                                                                   
                printf("%d\t\t", wt[i]);                                                                                                                   
                printf("%d\t\t", bt[i] + wt[i]);                                                                                                           
                printf("\n");                                                                                                                              
                twt += wt[i];                                                                                                                              
                tat += (wt[i] + bt[i]);                                                                                                                    
        }                                                                                                                                                  
        float att, awt;                                                                                                                                    
        awt = twt / n;                                                                                                                                     
        att = tat / n;                                                                                                                                     
        printf("Avg. waiting time= %f\n", awt);                                                                                                            
        printf("Avg. turnaround time= %f", att);                                                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:57 PM wk9]$ cat sp2.c                                                                                             
#include <stdio.h>                                                                                                                                         
struct process {                                                                                                                                           
        int id;                                                                                                                                            
        int burst_time;                                                                                                                                    
        int priority;                                                                                                                                      
        int remaining;                                                                                                                                     
        int waiting;                                                                                                                                       
        int turnaround;                                                                                                                                    
};                                                                                                                                                         
void calculateTimes1(struct process queue1[], int n, int quantum) {                                                                                        
        int currentTime = 0;                                                                                                                               
        int remainingProcesses = n;                                                                                                                        
        while (remainingProcesses > 0) {                                                                                                                   
                for (int i = 0; i < n; i++) {                                                                                                              
                        if (queue1[i].remaining > 0) {                                                                                                     
                                if (queue1[i].remaining > quantum) {                                                                                       
                                        currentTime += quantum;                                                                                            

                                        queue1[i].remaining -= quantum;                                                                                    

                                } else {                                                                                                                   
                                        currentTime += queue1[i].remaining;                                                                                

                                        queue1[i].waiting = currentTime - queue1[i].burst_time;                                                            
                                        queue1[i].turnaround = currentTime;                                                                                
                                        queue1[i].remaining = 0;                                                                                           
                                        remainingProcesses--;                                                                                              

                                }                                                                                                                          
                        }                                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
}                                                                                                                                                          
                                                                                                                                                           
void calculateTimes2(struct process queue2[], int n, int quantum) {                                                                                        
        int currentTime = 0;                                                                                                                               
        int remainingProcesses = n;                                                                                                                        
        while (remainingProcesses > 0) {                                                                                                                   
                for (int i = 0; i < n; i++) {                                                                                                              
                        if (queue2[i].remaining > 0) {                                                                                                     
                                if (queue2[i].remaining > quantum) {                                                                                       
                                        currentTime += quantum;                                                                                            

                                        queue2[i].remaining -= quantum;                                                                                    

                                } else {                                                                                                                   
                                        currentTime += queue2[i].remaining;                                                                                

                                        queue2[i].waiting = currentTime - queue2[i].burst_time;                                                            
                                        queue2[i].turnaround = currentTime;                                                                                
                                        queue2[i].remaining = 0;                                                                                           
                                        remainingProcesses--;                                                                                              

                                }                                                                                                                          
                        }                                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
}                                                                                                                                                          
void multi_level_queue(struct process p[], int n) {                                                                                                        
        struct process queue1[n], queue2[n], queue3[n];                                                                                                    
        int front1 = -1, rear1 = -1, front2 = -1, rear2 = -1, front3 = -1, rear3 = -1;                                                                     
        for (int i = 0; i < n; i++) {                                                                                                                      
                if (p[i].priority == 1) {                                                                                                                  
                        if (front1 == -1)                                                                                                                  
                                front1 = 0;                                                                                                                
                        rear1++;                                                                                                                           
                        queue1[rear1] = p[i];                                                                                                              
                }                                                                                                                                          
                else if (p[i].priority == 2) {                                                                                                             
                        if (front2 == -1)                                                                                                                  
                                front2 = 0;                                                                                                                
                        rear2++;                                                                                                                           
                        queue2[rear2] = p[i];                                                                                                              
                }                                                                                                                                          
                else {                                                                                                                                     
                        if (front3 == -1)                                                                                                                  
                                front3 = 0;                                                                                                                
                        rear3++;                                                                                                                           
                        queue3[rear3] = p[i];                                                                                                              
                }                                                                                                                                          
        }                                                                                                                                                  
        printf("Queue 1 (Priority 1):\n");                                                                                                                 
        int total_waiting_time = 0, total_turnaround_time = 0,n1=0;                                                                                        
        for (int i = front1; i <= rear1; i++) {                                                                                                            
                n1++;                                                                                                                                      
        }                                                                                                                                                  
        for (int i = 0; i < n1; i++) {                                                                                                                     
                queue1[i].remaining = queue1[i].burst_time;                                                                                                

        }                                                                                                                                                  
        calculateTimes1(queue1, n1, 3);                                                                                                                    

        for (int i = front1; i <= rear1; i++) {                                                                                                            
                printf("Process ID: %d, Burst Time: %d\n", queue1[i].id, queue1[i].burst_time);                                                            
                total_turnaround_time += queue1[i].turnaround;                                                                                             
                printf("Waiting Time: %d, Turnaround Time: %d\n", total_waiting_time, total_turnaround_time);                                              
                total_waiting_time += queue1[i].burst_time;                                                                                                
        }                                                                                                                                                  
        printf("Queue 2 (Priority 2):\n");                                                                                                                 
        int n2=0;                                                                                                                                          
        for (int i = front2; i <= rear2; i++) {                                                                                                            
                n2++;                                                                                                                                      
        }                                                                                                                                                  
        for (int i = 0; i < n2; i++) {                                                                                                                     
                queue2[i].remaining = queue2[i].burst_time;                                                                                                

        }                                                                                                                                                  
        calculateTimes2(queue2, n2, 9);                                                                                                                    

        for (int i = front2; i <= rear2; i++) {                                                                                                            
                printf("Process ID: %d, Burst Time: %d\n", queue1[i].id, queue1[i].burst_time);                                                            
                total_turnaround_time += queue2[i].turnaround;                                                                                             
                printf("Waiting Time: %d, Turnaround Time: %d\n", total_waiting_time, total_turnaround_time);                                              
                total_waiting_time += queue2[i].burst_time;                                                                                                
        }                                                                                                                                                  
        printf("Queue 3 (Priority 3):\n");                                                                                                                 
        for (int i = front3; i <= rear3; i++) {                                                                                                            
                printf("Process ID: %d, Burst Time: %d\n", queue3[i].id, queue3[i].burst_time);                                                            
                total_turnaround_time += queue3[i].burst_time;                                                                                             
                printf("Waiting Time: %d, Turnaround Time: %d\n", total_waiting_time, total_turnaround_time);                                              
                total_waiting_time += queue3[i].burst_time;                                                                                                
        }                                                                                                                                                  
        printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);                                                                             
        printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);                                                                       
}                                                                                                                                                          
int main() {                                                                                                                                               
        int n;                                                                                                                                             
        printf("Enter the number of processes: ");                                                                                                         
        scanf("%d", &n);                                                                                                                                   
        struct process p[n];                                                                                                                               
        for (int i = 0; i < n; i++) {                                                                                                                      
                printf("Enter details for process %d (ID BurstTime Priority): ", i + 1);                                                                   
                scanf("%d %d %d", &p[i].id, &p[i].burst_time, &p[i].priority);                                                                             
        }                                                                                                                                                  
        multi_level_queue(p, n);                                                                                                                           
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:57 PM wk9]$ cat rr1.c                                                                                             
#include<stdio.h>                                                                                                                                          

struct Process {                                                                                                                                           

        int pid;                                                                                                                                           

        int burst_time;                                                                                                                                    

        int remaining_time;                                                                                                                                

        int arrival_time;                                                                                                                                  

        int waiting_time;                                                                                                                                  

        int turnaround_time;                                                                                                                               

};                                                                                                                                                         

void calculateTimes(struct Process proc[], int n, int quantum) {                                                                                           

        int remaining_burst[n];                                                                                                                            

        for (int i = 0; i < n; i++) {                                                                                                                      

                remaining_burst[i] = proc[i].burst_time;                                                                                                   

        }                                                                                                                                                  

        int t = 0;                                                                                                                                         

        while (1) {                                                                                                                                        

                int done = 1;                                                                                                                              

                for (int i = 0; i < n; i++) {                                                                                                              

                        if (remaining_burst[i] > 0) {                                                                                                      

                                done = 0;                                                                                                                  

                                if (remaining_burst[i] > quantum) {                                                                                        

                                        t += quantum;                                                                                                      

                                        remaining_burst[i] -= quantum;                                                                                     

                                } else {                                                                                                                   

                                        t += remaining_burst[i];                                                                                           

                                        proc[i].waiting_time = t - proc[i].burst_time - proc[i].arrival_time;                                              

                                        remaining_burst[i] = 0;                                                                                            

                                }                                                                                                                          

                        }                                                                                                                                  
                }                                                                                                                                          

                if (done == 1)                                                                                                                             

                        break;                                                                                                                             

        }                                                                                                                                                  

        for (int i = 0; i < n; i++) {                                                                                                                      

                proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;                                                                       

        }                                                                                                                                                  

}                                                                                                                                                          

void displayProcesses(struct Process proc[], int n) {                                                                                                      

        printf("Process ID   Burst Time   Arrival Time   Waiting Time   Turnaround Time\n");                                                               

        for (int i = 0; i < n; i++) {                                                                                                                      

                printf("%7d %12d %14d %14d %16d\n", proc[i].pid, proc[i].burst_time, proc[i].arrival_time,                                                 

                                proc[i].waiting_time, proc[i].turnaround_time);                                                                            

        }                                                                                                                                                  

}                                                                                                                                                          

int main() {                                                                                                                                               

        int n, quantum;                                                                                                                                    

        printf("Enter the number of processes: ");                                                                                                         

        scanf("%d", &n);                                                                                                                                   

        struct Process proc[n];                                                                                                                            

        for (int i = 0; i < n; i++) {                                                                                                                      

                printf("Enter the arrival time and burst time for process %d: ", i + 1);                                                                   

                scanf("%d %d", &proc[i].arrival_time, &proc[i].burst_time);                                                                                

                proc[i].pid = i + 1;                                                                                                                       

        }                                                                                                                                                  

        printf("Enter the time quantum: ");                                                                                                                

        scanf("%d", &quantum); calculateTimes(proc,n,quantum);                                                                                             

        displayProcesses(proc,n);                                                                                                                          

        return 0;                                                                                                                                          

}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 05:57 PM wk9]$ cat sjf1.c                                                                                            
#include <stdio.h>                                                                                                                                         

#include <stdlib.h>                                                                                                                                        

#include <limits.h>                                                                                                                                        

struct Process {                                                                                                                                           

        int id;                                                                                                                                            

        int arrival_time;                                                                                                                                  

        int burst_time;                                                                                                                                    

        int waiting_time;                                                                                                                                  

        int turnaround_time;                                                                                                                               

};                                                                                                                                                         

int compareArrivalTime(const void *a, const void *b) {                                                                                                     

        return ((struct Process *)a)->arrival_time - ((struct Process *)b)->arrival_time;                                                                  

}                                                                                                                                                          

int compareBurstTime(const void *a, const void *b) {                                                                                                       

        return ((struct Process *)a)->burst_time - ((struct Process *)b)->burst_time;                                                                      

}                                                                                                                                                          

void findWaitingTime(struct Process processes[], int n) {                                                                                                  

        int currentTime = 0;                                                                                                                               

        int remainingTime[n];                                                                                                                              

        for (int i = 0; i < n; i++) {                                                                                                                      

                remainingTime[i] = processes[i].burst_time;                                                                                                

        }                                                                                                                                                  

        int completed = 0;                                                                                                                                 

        while (completed != n) {                                                                                                                           

                int minBurstIndex = -1, minBurst = INT_MAX;                                                                                                

                for (int i = 0; i < n; i++) {                                                                                                              

                        if (processes[i].arrival_time <= currentTime && remainingTime[i] < minBurst && remainingTime[i] > 0) {                             

                                minBurst = remainingTime[i];                                                                                               

                                minBurstIndex = i;                                                                                                         
                        }                                                                                                                                  

                }                                                                                                                                          

                if (minBurstIndex == -1) {                                                                                                                 

                        currentTime++;                                                                                                                     

                        continue;                                                                                                                          

                }                                                                                                                                          

                remainingTime[minBurstIndex]--;                                                                                                            

                if (remainingTime[minBurstIndex] == 0) {                                                                                                   

                        completed++;                                                                                                                       

                        processes[minBurstIndex].waiting_time = currentTime + 1 - processes[minBurstIndex].arrival_time - processes[minBurstIndex].burst_ti
me;                                                                                                                                                        
                        if (processes[minBurstIndex].waiting_time < 0) {                                                                                   

                                processes[minBurstIndex].waiting_time = 0;                                                                                 

                        }                                                                                                                                  

                }                                                                                                                                          

                currentTime++;                                                                                                                             

        }                                                                                                                                                  

}                                                                                                                                                          
void findTurnaroundTime(struct Process processes[], int n) {                                                                                               

        for (int i = 0; i < n; i++) {                                                                                                                      

                processes[i].turnaround_time = processes[i].burst_time + processes[i].waiting_time;                                                        

        }                                                                                                                                                  

}                                                                                                                                                          

void findAverageTime(struct Process processes[], int n) {                                                                                                  

        int total_waiting_time = 0, total_turnaround_time = 0;                                                                                             

        findWaitingTime(processes, n);                                                                                                                     

        findTurnaroundTime(processes, n);                                                                                                                  

        printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");                                                                      

        for (int i = 0; i < n; i++) {                                                                                                                      

                total_waiting_time += processes[i].waiting_time;                                                                                           

                total_turnaround_time += processes[i].turnaround_time;                                                                                     

                printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,                                                           

                                processes[i].burst_time, processes[i].waiting_time,                                                                        

                                processes[i].turnaround_time);                                                                                             

        }                                                                                                                                                  

        printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);                                                                           

        printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);                                                                       

}                                                                                                                                                          

int main() {                                                                                                                                               

        int n;                                                                                                                                             

        printf("Enter the number of processes: ");                                                                                                         

        scanf("%d", &n);                                                                                                                                   

        struct Process processes[n];                                                                                                                       

        printf("Enter arrival time and burst time for each process:\n");                                                                                   

        for (int i = 0; i < n; i++) {                                                                                                                      

                processes[i].id = i + 1;                                                                                                                   

                printf("Process %d: ", i + 1);                                                                                                             

                scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);                                                                      

        }                                                                                                                                                  

        qsort(processes, n, sizeof(struct Process), compareArrivalTime);                                                                                   
        findAverageTime(processes, n);                                                                                                                     

        return 0;                                                                                                                                          

}                                                                                                                                                          



















Week 10

[s2022103042@centos8-linux Wed May 15 06:17 PM os]$ cd wk10                                                                                                
[s2022103042@centos8-linux Wed May 15 06:17 PM wk10]$ ls                                                                                                   
a.out  bb  bb.c  dp  dp.c  rw  rw.c  sp  sp.c
[s2022103042@centos8-linux Wed May 15 06:17 PM wk10]$ cat bb.c                                                                                             
#include <stdio.h>                                                                                                                                         
#include <pthread.h>                                                                                                                                       
#include <semaphore.h>                                                                                                                                     
#define BUFFER_SIZE 5                                                      s                                                                                
#define NUM_ITEMS 10                                                                                                                                       
sem_t empty, full;                                                                                                                                         
pthread_mutex_t mutex;                                                                                                                                     
int buffer[BUFFER_SIZE];                                                                                                                                   
int in = 0, out = 0;                                                                                                                                       
void *producer(void *arg) {                                                                                                                                
        for (int i = 0; i < NUM_ITEMS; i++) {                                                                                                              
                sem_wait(&empty);                                                                                                                          
                pthread_mutex_lock(&mutex);                                                                                                                
                buffer[in] = i;                                                                                                                            
                in = (in + 1) % BUFFER_SIZE;                                                                                                               
                printf("Produced item %d\n", i);                                                                                                           
                pthread_mutex_unlock(&mutex);                                                                                                              
                sem_post(&full);                                                                                                                           
        }                                                                                                                                                  
        pthread_exit(NULL);                                                                                                                                
}                                                                                                                                                          
void *consumer(void *arg) {                                                                                                                                
        for (int i = 0; i < NUM_ITEMS; i++) {                                                                                                              
                sem_wait(&full);                                                                                                                           
                pthread_mutex_lock(&mutex);                                                                                                                
                int item = buffer[out];                                                                                                                    
                out = (out + 1) % BUFFER_SIZE;                                                                                                             
                printf("Consumed item %d\n", item);                                                                                                        
                pthread_mutex_unlock(&mutex);                                                                                                              
                sem_post(&empty);                                                                                                                          
        }                                                                                                                                                  
        pthread_exit(NULL);                                                                                                                                
}                                                                                                                                                          
int main() {                                                                                                                                               
        pthread_t producer_thread, consumer_thread;                                                                                                        
        pthread_mutex_init(&mutex, NULL);                                                                                                                  
        sem_init(&empty, 0, BUFFER_SIZE);                                                                                                                  
        sem_init(&full, 0, 0);                                                                                                                             
        pthread_create(&producer_thread, NULL, producer, NULL);                                                                                            
        pthread_create(&consumer_thread, NULL, consumer, NULL);                                                                                            
        pthread_join(producer_thread, NULL);                                                                                                               
        pthread_join(consumer_thread, NULL);                                                                                                               
        pthread_mutex_destroy(&mutex);                                                                                                                     
        sem_destroy(&empty);                                                                                                                               
        sem_destroy(&full);                                                                                                                                
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:17 PM wk10]$ cat rw.c                                                                                             
#include <stdio.h>                                                                                                                                         
#include <pthread.h>                                                                                                                                       
#include <semaphore.h>                                                                                                                                     
#include <unistd.h>                                                                                                                                        
#define NUM_READERS 3                                                                                                                                      
#define NUM_WRITERS 2                                                                                                                                      
sem_t mutex, wrt;                                                                                                                                          
int read_count = 0;                                                                                                                                        
int terminate = 0; // Variable to indicate when threads should terminate                                                                                   
void *reader(void *arg) {                                                                                                                                  
        while (!terminate) {                                                                                                                               
                sem_wait(&mutex);                                                                                                                          
                read_count++;                                                                                                                              
                if (read_count == 1) {                                                                                                                     
                        sem_wait(&wrt);                                                                                                                    
                }                                                                                                                                          
                sem_post(&mutex);                                                                                                                          
                printf("Reading data by reader %d\n", *(int*)arg);                                                                                         
                sem_wait(&mutex);                                                                                                                          
                read_count--;                                                                                                                              
                if (read_count == 0) {                                                                                                                     
                        sem_post(&wrt);                                                                                                                    
                }                                                                                                                                          
                sem_post(&mutex);                                                                                                                          
                usleep(1000000);                                                                                                                           
        }                                                                                                                                                  
        pthread_exit(NULL); // Exit the thread when termination condition is met                                                                           
}                                                                                                                                                          
void *writer(void *arg) {                                                                                                                                  
        while (!terminate) {                                                                                                                               
                sem_wait(&wrt);                                                                                                                            
                printf("Writing data by writer %d\n", *(int*)arg);                                                                                         
                sem_post(&wrt);                                                                                                                            
                usleep(2000000);                                                                                                                           
        }                                                                                                                                                  
        pthread_exit(NULL); // Exit the thread when termination condition is met                                                                           
}                                                                                                                                                          
int main() {                                                                                                                                               
        pthread_t readers[NUM_READERS], writers[NUM_WRITERS];                                                                                              
        sem_init(&mutex, 0, 1);                                                                                                                            
        sem_init(&wrt, 0, 1);                                                                                                                              
        int reader_ids[NUM_READERS];                                                                                                                       
        int writer_ids[NUM_WRITERS];                                                                                                                       
        for (int i = 0; i < NUM_READERS; i++) {                                                                                                            
                reader_ids[i] = i + 1;                                                                                                                     
                pthread_create(&readers[i], NULL, reader, &reader_ids[i]);                                                                                 
        }                                                                                                                                                  
        for (int i = 0; i < NUM_WRITERS; i++) {                                                                                                            
                writer_ids[i] = i + 1;                                                                                                                     
                pthread_create(&writers[i], NULL, writer, &writer_ids[i]);                                                                                 
        }                                                                                                                                                  
        sleep(10);                                                                                                                                         
        terminate = 1;                                                                                                                                     
        for (int i = 0; i < NUM_READERS; i++) {                                                                                                            
                pthread_join(readers[i], NULL);                                                                                                            
        }                                                                                                                                                  
        for (int i = 0; i < NUM_WRITERS; i++) {                                                                                                            
                pthread_join(writers[i], NULL);                                                                                                            
        }                                                                                                                                                  
        sem_destroy(&mutex);                                                                                                                               
        sem_destroy(&wrt);                                                                                                                                 
        return 0;                                                                                                                                          
}                                                                                                                                                          
[s2022103042@centos8-linux Wed May 15 06:17 PM wk10]$ cat dp.c                                                                                             
#include <stdio.h>                                                                                                                                         
#include <pthread.h>                                                                                                                                       
#include <semaphore.h>                                                                                                                                     
#include <unistd.h>                                                                                                                                        
#define NUM_PHILOSOPHERS 5                                                                                                                                 
#define THINKING 0                                                                                                                                         
#define HUNGRY 1                                                                                                                                           
#define EATING 2                                                                                                                                           
#define NUM_CYCLES 5 // Number of cycles before termination                                                                                                
sem_t mutex;                                                                                                                                               
sem_t forks[NUM_PHILOSOPHERS];                                                                                                                             
int state[NUM_PHILOSOPHERS];                                                                                                                               
int cycles_completed = 0; // Counter for completed cycles                                                                                                  
void test(int philosopher_id) {                                                                                                                            
        if (state[philosopher_id] == HUNGRY &&                                                                                                             
                        state[(philosopher_id + 4) % NUM_PHILOSOPHERS] != EATING &&                                                                        
                        state[(philosopher_id + 1) % NUM_PHILOSOPHERS] != EATING) {                                                                        
                state[philosopher_id] = EATING;                                                                                                            
                printf("Philosopher %d is eating\n", philosopher_id);                                                                                      
                sem_post(&forks[philosopher_id]);                                                                                                          
        }                                                                                                                                                  
}                                                                                                                                                          
void take_forks(int philosopher_id) {                                                                                                                      
        sem_wait(&mutex);                                                                                                                                  
        state[philosopher_id] = HUNGRY;                                                                                                                    
        printf("Philosopher %d is hungry\n", philosopher_id);                                                                                              
        test(philosopher_id);                                                                                                                              
        sem_post(&mutex);                                                                                                                                  
        sem_wait(&forks[philosopher_id]);                                                                                                                  
}                                                                                                                                                          
void put_forks(int philosopher_id) {                                                                                                                       
        sem_wait(&mutex);                                                                                                                                  
        state[philosopher_id] = THINKING;                                                                                                                  
        printf("Philosopher %d finished eating and is thinking\n", philosopher_id);                                                                        
        test((philosopher_id + 4) % NUM_PHILOSOPHERS);                                                                                                     
        test((philosopher_id + 1) % NUM_PHILOSOPHERS);                                                                                                     
        sem_post(&mutex);                                                                                                                                  
}                                                                                                                                                          
void *philosopher(void *arg) {                                                                                                                             
        int philosopher_id = *(int *)arg;                                                                                                                  
        while (1) {                                                                                                                                        
                if (cycles_completed == NUM_CYCLES) {                                                                                                      
                        break;                                                                                                                             
                }                                                                                                                                          
                printf("Philosopher %d is thinking\n", philosopher_id);                                                                                    
                usleep(2000000); // Simulating thinking time                                                                                               
                take_forks(philosopher_id);                                                                                                                
                usleep(1000000); // Simulating eating time                                                                                                 
                put_forks(philosopher_id);                                                                                                                 
                if (philosopher_id == NUM_PHILOSOPHERS - 1) {                                                                                              
                        sem_wait(&mutex);                                                                                                                  
                        cycles_completed++;                                                                                                                
                        sem_post(&mutex);                                                                                                                  
                }                                                                                                                                          
        }                                                                                                                                                  
        pthread_exit(NULL);                                                                                                                                
}                                                                                                                                                          
int main() {                                                                                                                                               
        pthread_t philosophers[NUM_PHILOSOPHERS];                                                                                                          
        sem_init(&mutex, 0, 1);                                                                                                                            
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {                                                                                                       
                sem_init(&forks[i], 0, 1);                                                                                                                 
        }                                                                                                                                                  
        int philosopher_ids[NUM_PHILOSOPHERS];                                                                                                             
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {                                                                                                       
                philosopher_ids[i] = i;                                                                                                                    
                pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);                                                                  
        }                                                                                                                                                  
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {                   pthread_join(philosophers[i], NULL);                                                

        }                                                                                                                                                  
        sem_destroy(&mutex);                                                                                                                               
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {                                                                                                       
                sem_destroy(&forks[i]);                                                                                                                    
        }                                                                                                                                                  
        return 0;                                                                                                                                          
} 

